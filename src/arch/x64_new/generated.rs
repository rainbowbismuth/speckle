// Copyright 2016 Emily A. Bellows
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

// DO NOT MODIFY
// This file was generated by tools/gen_x86_x64.pl6

use super::types::*;

#[derive(Copy, Clone, Debug)]
pub struct AL;

impl RegCode for AL {
    fn code(self) -> u8 {
        0
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg8 for AL {}

#[derive(Copy, Clone, Debug)]
pub struct CL;

impl RegCode for CL {
    fn code(self) -> u8 {
        1
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg8 for CL {}

#[derive(Copy, Clone, Debug)]
pub struct DL;

impl RegCode for DL {
    fn code(self) -> u8 {
        2
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg8 for DL {}

#[derive(Copy, Clone, Debug)]
pub struct BL;

impl RegCode for BL {
    fn code(self) -> u8 {
        3
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg8 for BL {}

#[derive(Copy, Clone, Debug)]
pub struct AH;

impl RegCode for AH {
    fn code(self) -> u8 {
        4
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg8 for AH {}

#[derive(Copy, Clone, Debug)]
pub struct CH;

impl RegCode for CH {
    fn code(self) -> u8 {
        5
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg8 for CH {}

#[derive(Copy, Clone, Debug)]
pub struct DH;

impl RegCode for DH {
    fn code(self) -> u8 {
        6
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg8 for DH {}

#[derive(Copy, Clone, Debug)]
pub struct BH;

impl RegCode for BH {
    fn code(self) -> u8 {
        7
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg8 for BH {}

#[derive(Copy, Clone, Debug)]
pub struct SPL;

impl RegCode for SPL {
    fn code(self) -> u8 {
        4
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || true
    }
}

impl Reg8 for SPL {}

#[derive(Copy, Clone, Debug)]
pub struct BPL;

impl RegCode for BPL {
    fn code(self) -> u8 {
        5
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || true
    }
}

impl Reg8 for BPL {}

#[derive(Copy, Clone, Debug)]
pub struct SIL;

impl RegCode for SIL {
    fn code(self) -> u8 {
        6
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || true
    }
}

impl Reg8 for SIL {}

#[derive(Copy, Clone, Debug)]
pub struct DIL;

impl RegCode for DIL {
    fn code(self) -> u8 {
        7
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || true
    }
}

impl Reg8 for DIL {}

#[derive(Copy, Clone, Debug)]
pub struct R8B;

impl RegCode for R8B {
    fn code(self) -> u8 {
        0
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg8 for R8B {}

#[derive(Copy, Clone, Debug)]
pub struct R9B;

impl RegCode for R9B {
    fn code(self) -> u8 {
        1
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg8 for R9B {}

#[derive(Copy, Clone, Debug)]
pub struct R10B;

impl RegCode for R10B {
    fn code(self) -> u8 {
        2
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg8 for R10B {}

#[derive(Copy, Clone, Debug)]
pub struct R11B;

impl RegCode for R11B {
    fn code(self) -> u8 {
        3
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg8 for R11B {}

#[derive(Copy, Clone, Debug)]
pub struct R12B;

impl RegCode for R12B {
    fn code(self) -> u8 {
        4
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg8 for R12B {}

#[derive(Copy, Clone, Debug)]
pub struct R13B;

impl RegCode for R13B {
    fn code(self) -> u8 {
        5
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg8 for R13B {}

#[derive(Copy, Clone, Debug)]
pub struct R14B;

impl RegCode for R14B {
    fn code(self) -> u8 {
        6
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg8 for R14B {}

#[derive(Copy, Clone, Debug)]
pub struct R15B;

impl RegCode for R15B {
    fn code(self) -> u8 {
        7
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg8 for R15B {}

#[derive(Copy, Clone, Debug)]
pub struct AX;

impl RegCode for AX {
    fn code(self) -> u8 {
        0
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg16 for AX {}

#[derive(Copy, Clone, Debug)]
pub struct CX;

impl RegCode for CX {
    fn code(self) -> u8 {
        1
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg16 for CX {}

#[derive(Copy, Clone, Debug)]
pub struct DX;

impl RegCode for DX {
    fn code(self) -> u8 {
        2
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg16 for DX {}

#[derive(Copy, Clone, Debug)]
pub struct BX;

impl RegCode for BX {
    fn code(self) -> u8 {
        3
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg16 for BX {}

#[derive(Copy, Clone, Debug)]
pub struct SP;

impl RegCode for SP {
    fn code(self) -> u8 {
        4
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg16 for SP {}

#[derive(Copy, Clone, Debug)]
pub struct BP;

impl RegCode for BP {
    fn code(self) -> u8 {
        5
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg16 for BP {}

#[derive(Copy, Clone, Debug)]
pub struct SI;

impl RegCode for SI {
    fn code(self) -> u8 {
        6
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg16 for SI {}

#[derive(Copy, Clone, Debug)]
pub struct DI;

impl RegCode for DI {
    fn code(self) -> u8 {
        7
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg16 for DI {}

#[derive(Copy, Clone, Debug)]
pub struct R8W;

impl RegCode for R8W {
    fn code(self) -> u8 {
        0
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg16 for R8W {}

#[derive(Copy, Clone, Debug)]
pub struct R9W;

impl RegCode for R9W {
    fn code(self) -> u8 {
        1
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg16 for R9W {}

#[derive(Copy, Clone, Debug)]
pub struct R10W;

impl RegCode for R10W {
    fn code(self) -> u8 {
        2
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg16 for R10W {}

#[derive(Copy, Clone, Debug)]
pub struct R11W;

impl RegCode for R11W {
    fn code(self) -> u8 {
        3
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg16 for R11W {}

#[derive(Copy, Clone, Debug)]
pub struct R12W;

impl RegCode for R12W {
    fn code(self) -> u8 {
        4
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg16 for R12W {}

#[derive(Copy, Clone, Debug)]
pub struct R13W;

impl RegCode for R13W {
    fn code(self) -> u8 {
        5
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg16 for R13W {}

#[derive(Copy, Clone, Debug)]
pub struct R14W;

impl RegCode for R14W {
    fn code(self) -> u8 {
        6
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg16 for R14W {}

#[derive(Copy, Clone, Debug)]
pub struct R15W;

impl RegCode for R15W {
    fn code(self) -> u8 {
        7
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg16 for R15W {}

#[derive(Copy, Clone, Debug)]
pub struct EAX;

impl RegCode for EAX {
    fn code(self) -> u8 {
        0
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg32 for EAX {}

#[derive(Copy, Clone, Debug)]
pub struct ECX;

impl RegCode for ECX {
    fn code(self) -> u8 {
        1
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg32 for ECX {}

#[derive(Copy, Clone, Debug)]
pub struct EDX;

impl RegCode for EDX {
    fn code(self) -> u8 {
        2
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg32 for EDX {}

#[derive(Copy, Clone, Debug)]
pub struct EBX;

impl RegCode for EBX {
    fn code(self) -> u8 {
        3
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg32 for EBX {}

#[derive(Copy, Clone, Debug)]
pub struct ESP;

impl RegCode for ESP {
    fn code(self) -> u8 {
        4
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg32 for ESP {}

#[derive(Copy, Clone, Debug)]
pub struct EBP;

impl RegCode for EBP {
    fn code(self) -> u8 {
        5
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg32 for EBP {}

#[derive(Copy, Clone, Debug)]
pub struct ESI;

impl RegCode for ESI {
    fn code(self) -> u8 {
        6
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg32 for ESI {}

#[derive(Copy, Clone, Debug)]
pub struct EDI;

impl RegCode for EDI {
    fn code(self) -> u8 {
        7
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg32 for EDI {}

#[derive(Copy, Clone, Debug)]
pub struct R8D;

impl RegCode for R8D {
    fn code(self) -> u8 {
        0
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg32 for R8D {}

#[derive(Copy, Clone, Debug)]
pub struct R9D;

impl RegCode for R9D {
    fn code(self) -> u8 {
        1
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg32 for R9D {}

#[derive(Copy, Clone, Debug)]
pub struct R10D;

impl RegCode for R10D {
    fn code(self) -> u8 {
        2
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg32 for R10D {}

#[derive(Copy, Clone, Debug)]
pub struct R11D;

impl RegCode for R11D {
    fn code(self) -> u8 {
        3
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg32 for R11D {}

#[derive(Copy, Clone, Debug)]
pub struct R12D;

impl RegCode for R12D {
    fn code(self) -> u8 {
        4
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg32 for R12D {}

#[derive(Copy, Clone, Debug)]
pub struct R14D;

impl RegCode for R14D {
    fn code(self) -> u8 {
        5
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg32 for R14D {}

#[derive(Copy, Clone, Debug)]
pub struct R15D;

impl RegCode for R15D {
    fn code(self) -> u8 {
        6
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg32 for R15D {}

#[derive(Copy, Clone, Debug)]
pub struct RAX;

impl RegCode for RAX {
    fn code(self) -> u8 {
        0
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg64 for RAX {}

#[derive(Copy, Clone, Debug)]
pub struct RCX;

impl RegCode for RCX {
    fn code(self) -> u8 {
        1
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg64 for RCX {}

#[derive(Copy, Clone, Debug)]
pub struct RDX;

impl RegCode for RDX {
    fn code(self) -> u8 {
        2
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg64 for RDX {}

#[derive(Copy, Clone, Debug)]
pub struct RBX;

impl RegCode for RBX {
    fn code(self) -> u8 {
        3
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg64 for RBX {}

#[derive(Copy, Clone, Debug)]
pub struct RSP;

impl RegCode for RSP {
    fn code(self) -> u8 {
        4
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg64 for RSP {}

#[derive(Copy, Clone, Debug)]
pub struct RBP;

impl RegCode for RBP {
    fn code(self) -> u8 {
        5
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg64 for RBP {}

#[derive(Copy, Clone, Debug)]
pub struct RSI;

impl RegCode for RSI {
    fn code(self) -> u8 {
        6
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg64 for RSI {}

#[derive(Copy, Clone, Debug)]
pub struct RDI;

impl RegCode for RDI {
    fn code(self) -> u8 {
        7
    }

    fn needs_ext(self) -> bool {
        false
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg64 for RDI {}

#[derive(Copy, Clone, Debug)]
pub struct R8;

impl RegCode for R8 {
    fn code(self) -> u8 {
        0
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg64 for R8 {}

#[derive(Copy, Clone, Debug)]
pub struct R9;

impl RegCode for R9 {
    fn code(self) -> u8 {
        1
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg64 for R9 {}

#[derive(Copy, Clone, Debug)]
pub struct R10;

impl RegCode for R10 {
    fn code(self) -> u8 {
        2
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg64 for R10 {}

#[derive(Copy, Clone, Debug)]
pub struct R11;

impl RegCode for R11 {
    fn code(self) -> u8 {
        3
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg64 for R11 {}

#[derive(Copy, Clone, Debug)]
pub struct R12;

impl RegCode for R12 {
    fn code(self) -> u8 {
        4
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg64 for R12 {}

#[derive(Copy, Clone, Debug)]
pub struct R13;

impl RegCode for R13 {
    fn code(self) -> u8 {
        5
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg64 for R13 {}

#[derive(Copy, Clone, Debug)]
pub struct R14;

impl RegCode for R14 {
    fn code(self) -> u8 {
        6
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg64 for R14 {}

#[derive(Copy, Clone, Debug)]
pub struct R15;

impl RegCode for R15 {
    fn code(self) -> u8 {
        7
    }

    fn needs_ext(self) -> bool {
        true
    }

    fn needs_rex(self) -> bool {
        self.needs_ext() || false
    }
}

impl Reg64 for R15 {}

#[derive(Copy, Clone, Debug)]
#[repr(u8)]
pub enum Register {
  AL,
  CL,
  DL,
  BL,
  AH,
  CH,
  DH,
  BH,
  SPL,
  BPL,
  SIL,
  DIL,
  R8B,
  R9B,
  R10B,
  R11B,
  R12B,
  R13B,
  R14B,
  R15B,
  AX,
  CX,
  DX,
  BX,
  SP,
  BP,
  SI,
  DI,
  R8W,
  R9W,
  R10W,
  R11W,
  R12W,
  R13W,
  R14W,
  R15W,
  EAX,
  ECX,
  EDX,
  EBX,
  ESP,
  EBP,
  ESI,
  EDI,
  R8D,
  R9D,
  R10D,
  R11D,
  R12D,
  R14D,
  R15D,
  RAX,
  RCX,
  RDX,
  RBX,
  RSP,
  RBP,
  RSI,
  RDI,
  R8,
  R9,
  R10,
  R11,
  R12,
  R13,
  R14,
  R15,
  RIP
}
pub fn info(reg: Register) -> RegisterInfo {
  match reg {
    Register::AL => RegisterInfo {
        size: Size::Byte,
        code: 0,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::CL => RegisterInfo {
        size: Size::Byte,
        code: 1,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::DL => RegisterInfo {
        size: Size::Byte,
        code: 2,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::BL => RegisterInfo {
        size: Size::Byte,
        code: 3,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::AH => RegisterInfo {
        size: Size::Byte,
        code: 4,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::CH => RegisterInfo {
        size: Size::Byte,
        code: 5,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::DH => RegisterInfo {
        size: Size::Byte,
        code: 6,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::BH => RegisterInfo {
        size: Size::Byte,
        code: 7,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::SPL => RegisterInfo {
        size: Size::Byte,
        code: 4,
        needs_extension: false,
        needs_any_rex: true,
    },

    Register::BPL => RegisterInfo {
        size: Size::Byte,
        code: 5,
        needs_extension: false,
        needs_any_rex: true,
    },

    Register::SIL => RegisterInfo {
        size: Size::Byte,
        code: 6,
        needs_extension: false,
        needs_any_rex: true,
    },

    Register::DIL => RegisterInfo {
        size: Size::Byte,
        code: 7,
        needs_extension: false,
        needs_any_rex: true,
    },

    Register::R8B => RegisterInfo {
        size: Size::Byte,
        code: 0,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R9B => RegisterInfo {
        size: Size::Byte,
        code: 1,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R10B => RegisterInfo {
        size: Size::Byte,
        code: 2,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R11B => RegisterInfo {
        size: Size::Byte,
        code: 3,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R12B => RegisterInfo {
        size: Size::Byte,
        code: 4,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R13B => RegisterInfo {
        size: Size::Byte,
        code: 5,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R14B => RegisterInfo {
        size: Size::Byte,
        code: 6,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R15B => RegisterInfo {
        size: Size::Byte,
        code: 7,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::AX => RegisterInfo {
        size: Size::Word,
        code: 0,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::CX => RegisterInfo {
        size: Size::Word,
        code: 1,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::DX => RegisterInfo {
        size: Size::Word,
        code: 2,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::BX => RegisterInfo {
        size: Size::Word,
        code: 3,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::SP => RegisterInfo {
        size: Size::Word,
        code: 4,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::BP => RegisterInfo {
        size: Size::Word,
        code: 5,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::SI => RegisterInfo {
        size: Size::Word,
        code: 6,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::DI => RegisterInfo {
        size: Size::Word,
        code: 7,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::R8W => RegisterInfo {
        size: Size::Word,
        code: 0,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R9W => RegisterInfo {
        size: Size::Word,
        code: 1,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R10W => RegisterInfo {
        size: Size::Word,
        code: 2,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R11W => RegisterInfo {
        size: Size::Word,
        code: 3,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R12W => RegisterInfo {
        size: Size::Word,
        code: 4,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R13W => RegisterInfo {
        size: Size::Word,
        code: 5,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R14W => RegisterInfo {
        size: Size::Word,
        code: 6,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R15W => RegisterInfo {
        size: Size::Word,
        code: 7,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::EAX => RegisterInfo {
        size: Size::Double,
        code: 0,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::ECX => RegisterInfo {
        size: Size::Double,
        code: 1,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::EDX => RegisterInfo {
        size: Size::Double,
        code: 2,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::EBX => RegisterInfo {
        size: Size::Double,
        code: 3,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::ESP => RegisterInfo {
        size: Size::Double,
        code: 4,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::EBP => RegisterInfo {
        size: Size::Double,
        code: 5,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::ESI => RegisterInfo {
        size: Size::Double,
        code: 6,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::EDI => RegisterInfo {
        size: Size::Double,
        code: 7,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::R8D => RegisterInfo {
        size: Size::Double,
        code: 0,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R9D => RegisterInfo {
        size: Size::Double,
        code: 1,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R10D => RegisterInfo {
        size: Size::Double,
        code: 2,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R11D => RegisterInfo {
        size: Size::Double,
        code: 3,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R12D => RegisterInfo {
        size: Size::Double,
        code: 4,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R14D => RegisterInfo {
        size: Size::Double,
        code: 5,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R15D => RegisterInfo {
        size: Size::Double,
        code: 6,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::RAX => RegisterInfo {
        size: Size::Quad,
        code: 0,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::RCX => RegisterInfo {
        size: Size::Quad,
        code: 1,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::RDX => RegisterInfo {
        size: Size::Quad,
        code: 2,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::RBX => RegisterInfo {
        size: Size::Quad,
        code: 3,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::RSP => RegisterInfo {
        size: Size::Quad,
        code: 4,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::RBP => RegisterInfo {
        size: Size::Quad,
        code: 5,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::RSI => RegisterInfo {
        size: Size::Quad,
        code: 6,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::RDI => RegisterInfo {
        size: Size::Quad,
        code: 7,
        needs_extension: false,
        needs_any_rex: false,
    },

    Register::R8 => RegisterInfo {
        size: Size::Quad,
        code: 0,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R9 => RegisterInfo {
        size: Size::Quad,
        code: 1,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R10 => RegisterInfo {
        size: Size::Quad,
        code: 2,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R11 => RegisterInfo {
        size: Size::Quad,
        code: 3,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R12 => RegisterInfo {
        size: Size::Quad,
        code: 4,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R13 => RegisterInfo {
        size: Size::Quad,
        code: 5,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R14 => RegisterInfo {
        size: Size::Quad,
        code: 6,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::R15 => RegisterInfo {
        size: Size::Quad,
        code: 7,
        needs_extension: true,
        needs_any_rex: false,
    },

    Register::RIP => RegisterInfo {
        size: Size::Quad,
        code: 5,
        needs_extension: false,
        needs_any_rex: false,
    }
  }
}

pub trait ADD<Dst, Src> {
    fn add(&mut self, dst: Dst, src: Src);
}

pub trait OR<Dst, Src> {
    fn or(&mut self, dst: Dst, src: Src);
}

pub trait ADC<Dst, Src> {
    fn adc(&mut self, dst: Dst, src: Src);
}

pub trait SBB<Dst, Src> {
    fn sbb(&mut self, dst: Dst, src: Src);
}

pub trait AND<Dst, Src> {
    fn and(&mut self, dst: Dst, src: Src);
}

pub trait SUB<Dst, Src> {
    fn sub(&mut self, dst: Dst, src: Src);
}

pub trait XOR<Dst, Src> {
    fn xor(&mut self, dst: Dst, src: Src);
}

pub trait CMP<Dst, Src> {
    fn cmp(&mut self, dst: Dst, src: Src);
}

impl<'a> ADD<AL, i8> for Assembler<'a> {
    fn add(&mut self, _: AL, src: i8) {
        let mut builder = InstructionBuilder::new();
        builder.emit(4);
        builder.emit_imm_i8(src);
        self.append(&builder);
    }
}

impl<'a> OR<AL, i8> for Assembler<'a> {
    fn or(&mut self, _: AL, src: i8) {
        let mut builder = InstructionBuilder::new();
        builder.emit(12);
        builder.emit_imm_i8(src);
        self.append(&builder);
    }
}

impl<'a> ADC<AL, i8> for Assembler<'a> {
    fn adc(&mut self, _: AL, src: i8) {
        let mut builder = InstructionBuilder::new();
        builder.emit(20);
        builder.emit_imm_i8(src);
        self.append(&builder);
    }
}

impl<'a> SBB<AL, i8> for Assembler<'a> {
    fn sbb(&mut self, _: AL, src: i8) {
        let mut builder = InstructionBuilder::new();
        builder.emit(28);
        builder.emit_imm_i8(src);
        self.append(&builder);
    }
}

impl<'a> AND<AL, i8> for Assembler<'a> {
    fn and(&mut self, _: AL, src: i8) {
        let mut builder = InstructionBuilder::new();
        builder.emit(36);
        builder.emit_imm_i8(src);
        self.append(&builder);
    }
}

impl<'a> SUB<AL, i8> for Assembler<'a> {
    fn sub(&mut self, _: AL, src: i8) {
        let mut builder = InstructionBuilder::new();
        builder.emit(44);
        builder.emit_imm_i8(src);
        self.append(&builder);
    }
}

impl<'a> XOR<AL, i8> for Assembler<'a> {
    fn xor(&mut self, _: AL, src: i8) {
        let mut builder = InstructionBuilder::new();
        builder.emit(52);
        builder.emit_imm_i8(src);
        self.append(&builder);
    }
}

impl<'a> CMP<AL, i8> for Assembler<'a> {
    fn cmp(&mut self, _: AL, src: i8) {
        let mut builder = InstructionBuilder::new();
        builder.emit(60);
        builder.emit_imm_i8(src);
        self.append(&builder);
    }
}

fn gen_r8_add<'a, Dst: Reg8, Src: Reg8>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(0);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r16_add<'a, Dst: Reg16, Src: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(1);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r32_add<'a, Dst: Reg32, Src: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(1);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r64_add<'a, Dst: Reg64, Src: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), true);
    builder.emit(1);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

impl<'a, Src: Reg32> ADD<R8D, Src> for Assembler<'a> {
    fn add(&mut self, dst: R8D, src: Src) {
        gen_r32_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<CL, Src> for Assembler<'a> {
    fn add(&mut self, dst: CL, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<AH, Src> for Assembler<'a> {
    fn add(&mut self, dst: AH, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADD<BX, Src> for Assembler<'a> {
    fn add(&mut self, dst: BX, src: Src) {
        gen_r16_add(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADD<ECX, Src> for Assembler<'a> {
    fn add(&mut self, dst: ECX, src: Src) {
        gen_r32_add(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADD<ESI, Src> for Assembler<'a> {
    fn add(&mut self, dst: ESI, src: Src) {
        gen_r32_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<R13B, Src> for Assembler<'a> {
    fn add(&mut self, dst: R13B, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADD<AX, Src> for Assembler<'a> {
    fn add(&mut self, dst: AX, src: Src) {
        gen_r16_add(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADD<EAX, Src> for Assembler<'a> {
    fn add(&mut self, dst: EAX, src: Src) {
        gen_r32_add(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADD<EBX, Src> for Assembler<'a> {
    fn add(&mut self, dst: EBX, src: Src) {
        gen_r32_add(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADD<RSI, Src> for Assembler<'a> {
    fn add(&mut self, dst: RSI, src: Src) {
        gen_r64_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<R15B, Src> for Assembler<'a> {
    fn add(&mut self, dst: R15B, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADD<DX, Src> for Assembler<'a> {
    fn add(&mut self, dst: DX, src: Src) {
        gen_r16_add(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADD<R8W, Src> for Assembler<'a> {
    fn add(&mut self, dst: R8W, src: Src) {
        gen_r16_add(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADD<R11W, Src> for Assembler<'a> {
    fn add(&mut self, dst: R11W, src: Src) {
        gen_r16_add(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADD<RBX, Src> for Assembler<'a> {
    fn add(&mut self, dst: RBX, src: Src) {
        gen_r64_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<BH, Src> for Assembler<'a> {
    fn add(&mut self, dst: BH, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<DIL, Src> for Assembler<'a> {
    fn add(&mut self, dst: DIL, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADD<SP, Src> for Assembler<'a> {
    fn add(&mut self, dst: SP, src: Src) {
        gen_r16_add(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADD<EBP, Src> for Assembler<'a> {
    fn add(&mut self, dst: EBP, src: Src) {
        gen_r32_add(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADD<R14, Src> for Assembler<'a> {
    fn add(&mut self, dst: R14, src: Src) {
        gen_r64_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<R12B, Src> for Assembler<'a> {
    fn add(&mut self, dst: R12B, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADD<R10, Src> for Assembler<'a> {
    fn add(&mut self, dst: R10, src: Src) {
        gen_r64_add(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADD<R9, Src> for Assembler<'a> {
    fn add(&mut self, dst: R9, src: Src) {
        gen_r64_add(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADD<RBP, Src> for Assembler<'a> {
    fn add(&mut self, dst: RBP, src: Src) {
        gen_r64_add(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADD<CX, Src> for Assembler<'a> {
    fn add(&mut self, dst: CX, src: Src) {
        gen_r16_add(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADD<R12W, Src> for Assembler<'a> {
    fn add(&mut self, dst: R12W, src: Src) {
        gen_r16_add(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADD<R15, Src> for Assembler<'a> {
    fn add(&mut self, dst: R15, src: Src) {
        gen_r64_add(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADD<R12, Src> for Assembler<'a> {
    fn add(&mut self, dst: R12, src: Src) {
        gen_r64_add(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADD<R11D, Src> for Assembler<'a> {
    fn add(&mut self, dst: R11D, src: Src) {
        gen_r32_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<SIL, Src> for Assembler<'a> {
    fn add(&mut self, dst: SIL, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<R14B, Src> for Assembler<'a> {
    fn add(&mut self, dst: R14B, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADD<RDX, Src> for Assembler<'a> {
    fn add(&mut self, dst: RDX, src: Src) {
        gen_r64_add(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADD<R15D, Src> for Assembler<'a> {
    fn add(&mut self, dst: R15D, src: Src) {
        gen_r32_add(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADD<R9D, Src> for Assembler<'a> {
    fn add(&mut self, dst: R9D, src: Src) {
        gen_r32_add(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADD<R14W, Src> for Assembler<'a> {
    fn add(&mut self, dst: R14W, src: Src) {
        gen_r16_add(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADD<RDI, Src> for Assembler<'a> {
    fn add(&mut self, dst: RDI, src: Src) {
        gen_r64_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<AL, Src> for Assembler<'a> {
    fn add(&mut self, dst: AL, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<R10B, Src> for Assembler<'a> {
    fn add(&mut self, dst: R10B, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADD<R10W, Src> for Assembler<'a> {
    fn add(&mut self, dst: R10W, src: Src) {
        gen_r16_add(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADD<R13W, Src> for Assembler<'a> {
    fn add(&mut self, dst: R13W, src: Src) {
        gen_r16_add(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADD<R14D, Src> for Assembler<'a> {
    fn add(&mut self, dst: R14D, src: Src) {
        gen_r32_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<R8B, Src> for Assembler<'a> {
    fn add(&mut self, dst: R8B, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADD<BP, Src> for Assembler<'a> {
    fn add(&mut self, dst: BP, src: Src) {
        gen_r16_add(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADD<R12D, Src> for Assembler<'a> {
    fn add(&mut self, dst: R12D, src: Src) {
        gen_r32_add(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADD<RCX, Src> for Assembler<'a> {
    fn add(&mut self, dst: RCX, src: Src) {
        gen_r64_add(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADD<RAX, Src> for Assembler<'a> {
    fn add(&mut self, dst: RAX, src: Src) {
        gen_r64_add(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADD<EDI, Src> for Assembler<'a> {
    fn add(&mut self, dst: EDI, src: Src) {
        gen_r32_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<BL, Src> for Assembler<'a> {
    fn add(&mut self, dst: BL, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<SPL, Src> for Assembler<'a> {
    fn add(&mut self, dst: SPL, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADD<DI, Src> for Assembler<'a> {
    fn add(&mut self, dst: DI, src: Src) {
        gen_r16_add(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADD<R9W, Src> for Assembler<'a> {
    fn add(&mut self, dst: R9W, src: Src) {
        gen_r16_add(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADD<R15W, Src> for Assembler<'a> {
    fn add(&mut self, dst: R15W, src: Src) {
        gen_r16_add(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADD<EDX, Src> for Assembler<'a> {
    fn add(&mut self, dst: EDX, src: Src) {
        gen_r32_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<CH, Src> for Assembler<'a> {
    fn add(&mut self, dst: CH, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<DH, Src> for Assembler<'a> {
    fn add(&mut self, dst: DH, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<R9B, Src> for Assembler<'a> {
    fn add(&mut self, dst: R9B, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADD<R13, Src> for Assembler<'a> {
    fn add(&mut self, dst: R13, src: Src) {
        gen_r64_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<DL, Src> for Assembler<'a> {
    fn add(&mut self, dst: DL, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<BPL, Src> for Assembler<'a> {
    fn add(&mut self, dst: BPL, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADD<R11B, Src> for Assembler<'a> {
    fn add(&mut self, dst: R11B, src: Src) {
        gen_r8_add(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADD<SI, Src> for Assembler<'a> {
    fn add(&mut self, dst: SI, src: Src) {
        gen_r16_add(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADD<R11, Src> for Assembler<'a> {
    fn add(&mut self, dst: R11, src: Src) {
        gen_r64_add(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADD<R8, Src> for Assembler<'a> {
    fn add(&mut self, dst: R8, src: Src) {
        gen_r64_add(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADD<RSP, Src> for Assembler<'a> {
    fn add(&mut self, dst: RSP, src: Src) {
        gen_r64_add(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADD<R10D, Src> for Assembler<'a> {
    fn add(&mut self, dst: R10D, src: Src) {
        gen_r32_add(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADD<ESP, Src> for Assembler<'a> {
    fn add(&mut self, dst: ESP, src: Src) {
        gen_r32_add(self, dst, src);
    }
}

fn gen_r8_or<'a, Dst: Reg8, Src: Reg8>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(8);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r16_or<'a, Dst: Reg16, Src: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(9);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r32_or<'a, Dst: Reg32, Src: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(9);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r64_or<'a, Dst: Reg64, Src: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), true);
    builder.emit(9);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

impl<'a, Src: Reg32> OR<R8D, Src> for Assembler<'a> {
    fn or(&mut self, dst: R8D, src: Src) {
        gen_r32_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<CL, Src> for Assembler<'a> {
    fn or(&mut self, dst: CL, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<AH, Src> for Assembler<'a> {
    fn or(&mut self, dst: AH, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg16> OR<BX, Src> for Assembler<'a> {
    fn or(&mut self, dst: BX, src: Src) {
        gen_r16_or(self, dst, src);
    }
}

impl<'a, Src: Reg32> OR<ECX, Src> for Assembler<'a> {
    fn or(&mut self, dst: ECX, src: Src) {
        gen_r32_or(self, dst, src);
    }
}

impl<'a, Src: Reg32> OR<ESI, Src> for Assembler<'a> {
    fn or(&mut self, dst: ESI, src: Src) {
        gen_r32_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<R13B, Src> for Assembler<'a> {
    fn or(&mut self, dst: R13B, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg16> OR<AX, Src> for Assembler<'a> {
    fn or(&mut self, dst: AX, src: Src) {
        gen_r16_or(self, dst, src);
    }
}

impl<'a, Src: Reg32> OR<EAX, Src> for Assembler<'a> {
    fn or(&mut self, dst: EAX, src: Src) {
        gen_r32_or(self, dst, src);
    }
}

impl<'a, Src: Reg32> OR<EBX, Src> for Assembler<'a> {
    fn or(&mut self, dst: EBX, src: Src) {
        gen_r32_or(self, dst, src);
    }
}

impl<'a, Src: Reg64> OR<RSI, Src> for Assembler<'a> {
    fn or(&mut self, dst: RSI, src: Src) {
        gen_r64_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<R15B, Src> for Assembler<'a> {
    fn or(&mut self, dst: R15B, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg16> OR<DX, Src> for Assembler<'a> {
    fn or(&mut self, dst: DX, src: Src) {
        gen_r16_or(self, dst, src);
    }
}

impl<'a, Src: Reg16> OR<R8W, Src> for Assembler<'a> {
    fn or(&mut self, dst: R8W, src: Src) {
        gen_r16_or(self, dst, src);
    }
}

impl<'a, Src: Reg16> OR<R11W, Src> for Assembler<'a> {
    fn or(&mut self, dst: R11W, src: Src) {
        gen_r16_or(self, dst, src);
    }
}

impl<'a, Src: Reg64> OR<RBX, Src> for Assembler<'a> {
    fn or(&mut self, dst: RBX, src: Src) {
        gen_r64_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<BH, Src> for Assembler<'a> {
    fn or(&mut self, dst: BH, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<DIL, Src> for Assembler<'a> {
    fn or(&mut self, dst: DIL, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg16> OR<SP, Src> for Assembler<'a> {
    fn or(&mut self, dst: SP, src: Src) {
        gen_r16_or(self, dst, src);
    }
}

impl<'a, Src: Reg32> OR<EBP, Src> for Assembler<'a> {
    fn or(&mut self, dst: EBP, src: Src) {
        gen_r32_or(self, dst, src);
    }
}

impl<'a, Src: Reg64> OR<R14, Src> for Assembler<'a> {
    fn or(&mut self, dst: R14, src: Src) {
        gen_r64_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<R12B, Src> for Assembler<'a> {
    fn or(&mut self, dst: R12B, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg64> OR<R10, Src> for Assembler<'a> {
    fn or(&mut self, dst: R10, src: Src) {
        gen_r64_or(self, dst, src);
    }
}

impl<'a, Src: Reg64> OR<R9, Src> for Assembler<'a> {
    fn or(&mut self, dst: R9, src: Src) {
        gen_r64_or(self, dst, src);
    }
}

impl<'a, Src: Reg64> OR<RBP, Src> for Assembler<'a> {
    fn or(&mut self, dst: RBP, src: Src) {
        gen_r64_or(self, dst, src);
    }
}

impl<'a, Src: Reg16> OR<CX, Src> for Assembler<'a> {
    fn or(&mut self, dst: CX, src: Src) {
        gen_r16_or(self, dst, src);
    }
}

impl<'a, Src: Reg16> OR<R12W, Src> for Assembler<'a> {
    fn or(&mut self, dst: R12W, src: Src) {
        gen_r16_or(self, dst, src);
    }
}

impl<'a, Src: Reg64> OR<R15, Src> for Assembler<'a> {
    fn or(&mut self, dst: R15, src: Src) {
        gen_r64_or(self, dst, src);
    }
}

impl<'a, Src: Reg64> OR<R12, Src> for Assembler<'a> {
    fn or(&mut self, dst: R12, src: Src) {
        gen_r64_or(self, dst, src);
    }
}

impl<'a, Src: Reg32> OR<R11D, Src> for Assembler<'a> {
    fn or(&mut self, dst: R11D, src: Src) {
        gen_r32_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<SIL, Src> for Assembler<'a> {
    fn or(&mut self, dst: SIL, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<R14B, Src> for Assembler<'a> {
    fn or(&mut self, dst: R14B, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg64> OR<RDX, Src> for Assembler<'a> {
    fn or(&mut self, dst: RDX, src: Src) {
        gen_r64_or(self, dst, src);
    }
}

impl<'a, Src: Reg32> OR<R15D, Src> for Assembler<'a> {
    fn or(&mut self, dst: R15D, src: Src) {
        gen_r32_or(self, dst, src);
    }
}

impl<'a, Src: Reg32> OR<R9D, Src> for Assembler<'a> {
    fn or(&mut self, dst: R9D, src: Src) {
        gen_r32_or(self, dst, src);
    }
}

impl<'a, Src: Reg16> OR<R14W, Src> for Assembler<'a> {
    fn or(&mut self, dst: R14W, src: Src) {
        gen_r16_or(self, dst, src);
    }
}

impl<'a, Src: Reg64> OR<RDI, Src> for Assembler<'a> {
    fn or(&mut self, dst: RDI, src: Src) {
        gen_r64_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<AL, Src> for Assembler<'a> {
    fn or(&mut self, dst: AL, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<R10B, Src> for Assembler<'a> {
    fn or(&mut self, dst: R10B, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg16> OR<R10W, Src> for Assembler<'a> {
    fn or(&mut self, dst: R10W, src: Src) {
        gen_r16_or(self, dst, src);
    }
}

impl<'a, Src: Reg16> OR<R13W, Src> for Assembler<'a> {
    fn or(&mut self, dst: R13W, src: Src) {
        gen_r16_or(self, dst, src);
    }
}

impl<'a, Src: Reg32> OR<R14D, Src> for Assembler<'a> {
    fn or(&mut self, dst: R14D, src: Src) {
        gen_r32_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<R8B, Src> for Assembler<'a> {
    fn or(&mut self, dst: R8B, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg16> OR<BP, Src> for Assembler<'a> {
    fn or(&mut self, dst: BP, src: Src) {
        gen_r16_or(self, dst, src);
    }
}

impl<'a, Src: Reg32> OR<R12D, Src> for Assembler<'a> {
    fn or(&mut self, dst: R12D, src: Src) {
        gen_r32_or(self, dst, src);
    }
}

impl<'a, Src: Reg64> OR<RCX, Src> for Assembler<'a> {
    fn or(&mut self, dst: RCX, src: Src) {
        gen_r64_or(self, dst, src);
    }
}

impl<'a, Src: Reg64> OR<RAX, Src> for Assembler<'a> {
    fn or(&mut self, dst: RAX, src: Src) {
        gen_r64_or(self, dst, src);
    }
}

impl<'a, Src: Reg32> OR<EDI, Src> for Assembler<'a> {
    fn or(&mut self, dst: EDI, src: Src) {
        gen_r32_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<BL, Src> for Assembler<'a> {
    fn or(&mut self, dst: BL, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<SPL, Src> for Assembler<'a> {
    fn or(&mut self, dst: SPL, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg16> OR<DI, Src> for Assembler<'a> {
    fn or(&mut self, dst: DI, src: Src) {
        gen_r16_or(self, dst, src);
    }
}

impl<'a, Src: Reg16> OR<R9W, Src> for Assembler<'a> {
    fn or(&mut self, dst: R9W, src: Src) {
        gen_r16_or(self, dst, src);
    }
}

impl<'a, Src: Reg16> OR<R15W, Src> for Assembler<'a> {
    fn or(&mut self, dst: R15W, src: Src) {
        gen_r16_or(self, dst, src);
    }
}

impl<'a, Src: Reg32> OR<EDX, Src> for Assembler<'a> {
    fn or(&mut self, dst: EDX, src: Src) {
        gen_r32_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<CH, Src> for Assembler<'a> {
    fn or(&mut self, dst: CH, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<DH, Src> for Assembler<'a> {
    fn or(&mut self, dst: DH, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<R9B, Src> for Assembler<'a> {
    fn or(&mut self, dst: R9B, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg64> OR<R13, Src> for Assembler<'a> {
    fn or(&mut self, dst: R13, src: Src) {
        gen_r64_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<DL, Src> for Assembler<'a> {
    fn or(&mut self, dst: DL, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<BPL, Src> for Assembler<'a> {
    fn or(&mut self, dst: BPL, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg8> OR<R11B, Src> for Assembler<'a> {
    fn or(&mut self, dst: R11B, src: Src) {
        gen_r8_or(self, dst, src);
    }
}

impl<'a, Src: Reg16> OR<SI, Src> for Assembler<'a> {
    fn or(&mut self, dst: SI, src: Src) {
        gen_r16_or(self, dst, src);
    }
}

impl<'a, Src: Reg64> OR<R11, Src> for Assembler<'a> {
    fn or(&mut self, dst: R11, src: Src) {
        gen_r64_or(self, dst, src);
    }
}

impl<'a, Src: Reg64> OR<R8, Src> for Assembler<'a> {
    fn or(&mut self, dst: R8, src: Src) {
        gen_r64_or(self, dst, src);
    }
}

impl<'a, Src: Reg64> OR<RSP, Src> for Assembler<'a> {
    fn or(&mut self, dst: RSP, src: Src) {
        gen_r64_or(self, dst, src);
    }
}

impl<'a, Src: Reg32> OR<R10D, Src> for Assembler<'a> {
    fn or(&mut self, dst: R10D, src: Src) {
        gen_r32_or(self, dst, src);
    }
}

impl<'a, Src: Reg32> OR<ESP, Src> for Assembler<'a> {
    fn or(&mut self, dst: ESP, src: Src) {
        gen_r32_or(self, dst, src);
    }
}

fn gen_r8_adc<'a, Dst: Reg8, Src: Reg8>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(16);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r16_adc<'a, Dst: Reg16, Src: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(17);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r32_adc<'a, Dst: Reg32, Src: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(17);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r64_adc<'a, Dst: Reg64, Src: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), true);
    builder.emit(17);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

impl<'a, Src: Reg32> ADC<R8D, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R8D, src: Src) {
        gen_r32_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<CL, Src> for Assembler<'a> {
    fn adc(&mut self, dst: CL, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<AH, Src> for Assembler<'a> {
    fn adc(&mut self, dst: AH, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADC<BX, Src> for Assembler<'a> {
    fn adc(&mut self, dst: BX, src: Src) {
        gen_r16_adc(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADC<ECX, Src> for Assembler<'a> {
    fn adc(&mut self, dst: ECX, src: Src) {
        gen_r32_adc(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADC<ESI, Src> for Assembler<'a> {
    fn adc(&mut self, dst: ESI, src: Src) {
        gen_r32_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<R13B, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R13B, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADC<AX, Src> for Assembler<'a> {
    fn adc(&mut self, dst: AX, src: Src) {
        gen_r16_adc(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADC<EAX, Src> for Assembler<'a> {
    fn adc(&mut self, dst: EAX, src: Src) {
        gen_r32_adc(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADC<EBX, Src> for Assembler<'a> {
    fn adc(&mut self, dst: EBX, src: Src) {
        gen_r32_adc(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADC<RSI, Src> for Assembler<'a> {
    fn adc(&mut self, dst: RSI, src: Src) {
        gen_r64_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<R15B, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R15B, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADC<DX, Src> for Assembler<'a> {
    fn adc(&mut self, dst: DX, src: Src) {
        gen_r16_adc(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADC<R8W, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R8W, src: Src) {
        gen_r16_adc(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADC<R11W, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R11W, src: Src) {
        gen_r16_adc(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADC<RBX, Src> for Assembler<'a> {
    fn adc(&mut self, dst: RBX, src: Src) {
        gen_r64_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<BH, Src> for Assembler<'a> {
    fn adc(&mut self, dst: BH, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<DIL, Src> for Assembler<'a> {
    fn adc(&mut self, dst: DIL, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADC<SP, Src> for Assembler<'a> {
    fn adc(&mut self, dst: SP, src: Src) {
        gen_r16_adc(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADC<EBP, Src> for Assembler<'a> {
    fn adc(&mut self, dst: EBP, src: Src) {
        gen_r32_adc(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADC<R14, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R14, src: Src) {
        gen_r64_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<R12B, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R12B, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADC<R10, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R10, src: Src) {
        gen_r64_adc(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADC<R9, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R9, src: Src) {
        gen_r64_adc(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADC<RBP, Src> for Assembler<'a> {
    fn adc(&mut self, dst: RBP, src: Src) {
        gen_r64_adc(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADC<CX, Src> for Assembler<'a> {
    fn adc(&mut self, dst: CX, src: Src) {
        gen_r16_adc(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADC<R12W, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R12W, src: Src) {
        gen_r16_adc(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADC<R15, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R15, src: Src) {
        gen_r64_adc(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADC<R12, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R12, src: Src) {
        gen_r64_adc(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADC<R11D, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R11D, src: Src) {
        gen_r32_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<SIL, Src> for Assembler<'a> {
    fn adc(&mut self, dst: SIL, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<R14B, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R14B, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADC<RDX, Src> for Assembler<'a> {
    fn adc(&mut self, dst: RDX, src: Src) {
        gen_r64_adc(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADC<R15D, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R15D, src: Src) {
        gen_r32_adc(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADC<R9D, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R9D, src: Src) {
        gen_r32_adc(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADC<R14W, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R14W, src: Src) {
        gen_r16_adc(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADC<RDI, Src> for Assembler<'a> {
    fn adc(&mut self, dst: RDI, src: Src) {
        gen_r64_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<AL, Src> for Assembler<'a> {
    fn adc(&mut self, dst: AL, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<R10B, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R10B, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADC<R10W, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R10W, src: Src) {
        gen_r16_adc(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADC<R13W, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R13W, src: Src) {
        gen_r16_adc(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADC<R14D, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R14D, src: Src) {
        gen_r32_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<R8B, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R8B, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADC<BP, Src> for Assembler<'a> {
    fn adc(&mut self, dst: BP, src: Src) {
        gen_r16_adc(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADC<R12D, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R12D, src: Src) {
        gen_r32_adc(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADC<RCX, Src> for Assembler<'a> {
    fn adc(&mut self, dst: RCX, src: Src) {
        gen_r64_adc(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADC<RAX, Src> for Assembler<'a> {
    fn adc(&mut self, dst: RAX, src: Src) {
        gen_r64_adc(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADC<EDI, Src> for Assembler<'a> {
    fn adc(&mut self, dst: EDI, src: Src) {
        gen_r32_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<BL, Src> for Assembler<'a> {
    fn adc(&mut self, dst: BL, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<SPL, Src> for Assembler<'a> {
    fn adc(&mut self, dst: SPL, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADC<DI, Src> for Assembler<'a> {
    fn adc(&mut self, dst: DI, src: Src) {
        gen_r16_adc(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADC<R9W, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R9W, src: Src) {
        gen_r16_adc(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADC<R15W, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R15W, src: Src) {
        gen_r16_adc(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADC<EDX, Src> for Assembler<'a> {
    fn adc(&mut self, dst: EDX, src: Src) {
        gen_r32_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<CH, Src> for Assembler<'a> {
    fn adc(&mut self, dst: CH, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<DH, Src> for Assembler<'a> {
    fn adc(&mut self, dst: DH, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<R9B, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R9B, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADC<R13, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R13, src: Src) {
        gen_r64_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<DL, Src> for Assembler<'a> {
    fn adc(&mut self, dst: DL, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<BPL, Src> for Assembler<'a> {
    fn adc(&mut self, dst: BPL, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg8> ADC<R11B, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R11B, src: Src) {
        gen_r8_adc(self, dst, src);
    }
}

impl<'a, Src: Reg16> ADC<SI, Src> for Assembler<'a> {
    fn adc(&mut self, dst: SI, src: Src) {
        gen_r16_adc(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADC<R11, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R11, src: Src) {
        gen_r64_adc(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADC<R8, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R8, src: Src) {
        gen_r64_adc(self, dst, src);
    }
}

impl<'a, Src: Reg64> ADC<RSP, Src> for Assembler<'a> {
    fn adc(&mut self, dst: RSP, src: Src) {
        gen_r64_adc(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADC<R10D, Src> for Assembler<'a> {
    fn adc(&mut self, dst: R10D, src: Src) {
        gen_r32_adc(self, dst, src);
    }
}

impl<'a, Src: Reg32> ADC<ESP, Src> for Assembler<'a> {
    fn adc(&mut self, dst: ESP, src: Src) {
        gen_r32_adc(self, dst, src);
    }
}

fn gen_r8_sbb<'a, Dst: Reg8, Src: Reg8>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(24);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r16_sbb<'a, Dst: Reg16, Src: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(25);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r32_sbb<'a, Dst: Reg32, Src: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(25);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r64_sbb<'a, Dst: Reg64, Src: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), true);
    builder.emit(25);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

impl<'a, Src: Reg32> SBB<R8D, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R8D, src: Src) {
        gen_r32_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<CL, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: CL, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<AH, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: AH, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg16> SBB<BX, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: BX, src: Src) {
        gen_r16_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg32> SBB<ECX, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: ECX, src: Src) {
        gen_r32_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg32> SBB<ESI, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: ESI, src: Src) {
        gen_r32_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<R13B, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R13B, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg16> SBB<AX, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: AX, src: Src) {
        gen_r16_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg32> SBB<EAX, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: EAX, src: Src) {
        gen_r32_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg32> SBB<EBX, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: EBX, src: Src) {
        gen_r32_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg64> SBB<RSI, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: RSI, src: Src) {
        gen_r64_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<R15B, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R15B, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg16> SBB<DX, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: DX, src: Src) {
        gen_r16_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg16> SBB<R8W, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R8W, src: Src) {
        gen_r16_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg16> SBB<R11W, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R11W, src: Src) {
        gen_r16_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg64> SBB<RBX, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: RBX, src: Src) {
        gen_r64_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<BH, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: BH, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<DIL, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: DIL, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg16> SBB<SP, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: SP, src: Src) {
        gen_r16_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg32> SBB<EBP, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: EBP, src: Src) {
        gen_r32_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg64> SBB<R14, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R14, src: Src) {
        gen_r64_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<R12B, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R12B, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg64> SBB<R10, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R10, src: Src) {
        gen_r64_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg64> SBB<R9, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R9, src: Src) {
        gen_r64_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg64> SBB<RBP, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: RBP, src: Src) {
        gen_r64_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg16> SBB<CX, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: CX, src: Src) {
        gen_r16_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg16> SBB<R12W, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R12W, src: Src) {
        gen_r16_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg64> SBB<R15, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R15, src: Src) {
        gen_r64_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg64> SBB<R12, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R12, src: Src) {
        gen_r64_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg32> SBB<R11D, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R11D, src: Src) {
        gen_r32_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<SIL, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: SIL, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<R14B, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R14B, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg64> SBB<RDX, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: RDX, src: Src) {
        gen_r64_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg32> SBB<R15D, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R15D, src: Src) {
        gen_r32_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg32> SBB<R9D, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R9D, src: Src) {
        gen_r32_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg16> SBB<R14W, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R14W, src: Src) {
        gen_r16_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg64> SBB<RDI, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: RDI, src: Src) {
        gen_r64_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<AL, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: AL, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<R10B, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R10B, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg16> SBB<R10W, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R10W, src: Src) {
        gen_r16_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg16> SBB<R13W, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R13W, src: Src) {
        gen_r16_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg32> SBB<R14D, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R14D, src: Src) {
        gen_r32_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<R8B, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R8B, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg16> SBB<BP, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: BP, src: Src) {
        gen_r16_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg32> SBB<R12D, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R12D, src: Src) {
        gen_r32_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg64> SBB<RCX, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: RCX, src: Src) {
        gen_r64_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg64> SBB<RAX, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: RAX, src: Src) {
        gen_r64_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg32> SBB<EDI, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: EDI, src: Src) {
        gen_r32_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<BL, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: BL, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<SPL, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: SPL, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg16> SBB<DI, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: DI, src: Src) {
        gen_r16_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg16> SBB<R9W, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R9W, src: Src) {
        gen_r16_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg16> SBB<R15W, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R15W, src: Src) {
        gen_r16_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg32> SBB<EDX, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: EDX, src: Src) {
        gen_r32_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<CH, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: CH, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<DH, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: DH, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<R9B, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R9B, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg64> SBB<R13, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R13, src: Src) {
        gen_r64_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<DL, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: DL, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<BPL, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: BPL, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg8> SBB<R11B, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R11B, src: Src) {
        gen_r8_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg16> SBB<SI, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: SI, src: Src) {
        gen_r16_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg64> SBB<R11, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R11, src: Src) {
        gen_r64_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg64> SBB<R8, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R8, src: Src) {
        gen_r64_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg64> SBB<RSP, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: RSP, src: Src) {
        gen_r64_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg32> SBB<R10D, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: R10D, src: Src) {
        gen_r32_sbb(self, dst, src);
    }
}

impl<'a, Src: Reg32> SBB<ESP, Src> for Assembler<'a> {
    fn sbb(&mut self, dst: ESP, src: Src) {
        gen_r32_sbb(self, dst, src);
    }
}

fn gen_r8_and<'a, Dst: Reg8, Src: Reg8>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(32);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r16_and<'a, Dst: Reg16, Src: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(33);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r32_and<'a, Dst: Reg32, Src: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(33);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r64_and<'a, Dst: Reg64, Src: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), true);
    builder.emit(33);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

impl<'a, Src: Reg32> AND<R8D, Src> for Assembler<'a> {
    fn and(&mut self, dst: R8D, src: Src) {
        gen_r32_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<CL, Src> for Assembler<'a> {
    fn and(&mut self, dst: CL, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<AH, Src> for Assembler<'a> {
    fn and(&mut self, dst: AH, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg16> AND<BX, Src> for Assembler<'a> {
    fn and(&mut self, dst: BX, src: Src) {
        gen_r16_and(self, dst, src);
    }
}

impl<'a, Src: Reg32> AND<ECX, Src> for Assembler<'a> {
    fn and(&mut self, dst: ECX, src: Src) {
        gen_r32_and(self, dst, src);
    }
}

impl<'a, Src: Reg32> AND<ESI, Src> for Assembler<'a> {
    fn and(&mut self, dst: ESI, src: Src) {
        gen_r32_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<R13B, Src> for Assembler<'a> {
    fn and(&mut self, dst: R13B, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg16> AND<AX, Src> for Assembler<'a> {
    fn and(&mut self, dst: AX, src: Src) {
        gen_r16_and(self, dst, src);
    }
}

impl<'a, Src: Reg32> AND<EAX, Src> for Assembler<'a> {
    fn and(&mut self, dst: EAX, src: Src) {
        gen_r32_and(self, dst, src);
    }
}

impl<'a, Src: Reg32> AND<EBX, Src> for Assembler<'a> {
    fn and(&mut self, dst: EBX, src: Src) {
        gen_r32_and(self, dst, src);
    }
}

impl<'a, Src: Reg64> AND<RSI, Src> for Assembler<'a> {
    fn and(&mut self, dst: RSI, src: Src) {
        gen_r64_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<R15B, Src> for Assembler<'a> {
    fn and(&mut self, dst: R15B, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg16> AND<DX, Src> for Assembler<'a> {
    fn and(&mut self, dst: DX, src: Src) {
        gen_r16_and(self, dst, src);
    }
}

impl<'a, Src: Reg16> AND<R8W, Src> for Assembler<'a> {
    fn and(&mut self, dst: R8W, src: Src) {
        gen_r16_and(self, dst, src);
    }
}

impl<'a, Src: Reg16> AND<R11W, Src> for Assembler<'a> {
    fn and(&mut self, dst: R11W, src: Src) {
        gen_r16_and(self, dst, src);
    }
}

impl<'a, Src: Reg64> AND<RBX, Src> for Assembler<'a> {
    fn and(&mut self, dst: RBX, src: Src) {
        gen_r64_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<BH, Src> for Assembler<'a> {
    fn and(&mut self, dst: BH, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<DIL, Src> for Assembler<'a> {
    fn and(&mut self, dst: DIL, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg16> AND<SP, Src> for Assembler<'a> {
    fn and(&mut self, dst: SP, src: Src) {
        gen_r16_and(self, dst, src);
    }
}

impl<'a, Src: Reg32> AND<EBP, Src> for Assembler<'a> {
    fn and(&mut self, dst: EBP, src: Src) {
        gen_r32_and(self, dst, src);
    }
}

impl<'a, Src: Reg64> AND<R14, Src> for Assembler<'a> {
    fn and(&mut self, dst: R14, src: Src) {
        gen_r64_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<R12B, Src> for Assembler<'a> {
    fn and(&mut self, dst: R12B, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg64> AND<R10, Src> for Assembler<'a> {
    fn and(&mut self, dst: R10, src: Src) {
        gen_r64_and(self, dst, src);
    }
}

impl<'a, Src: Reg64> AND<R9, Src> for Assembler<'a> {
    fn and(&mut self, dst: R9, src: Src) {
        gen_r64_and(self, dst, src);
    }
}

impl<'a, Src: Reg64> AND<RBP, Src> for Assembler<'a> {
    fn and(&mut self, dst: RBP, src: Src) {
        gen_r64_and(self, dst, src);
    }
}

impl<'a, Src: Reg16> AND<CX, Src> for Assembler<'a> {
    fn and(&mut self, dst: CX, src: Src) {
        gen_r16_and(self, dst, src);
    }
}

impl<'a, Src: Reg16> AND<R12W, Src> for Assembler<'a> {
    fn and(&mut self, dst: R12W, src: Src) {
        gen_r16_and(self, dst, src);
    }
}

impl<'a, Src: Reg64> AND<R15, Src> for Assembler<'a> {
    fn and(&mut self, dst: R15, src: Src) {
        gen_r64_and(self, dst, src);
    }
}

impl<'a, Src: Reg64> AND<R12, Src> for Assembler<'a> {
    fn and(&mut self, dst: R12, src: Src) {
        gen_r64_and(self, dst, src);
    }
}

impl<'a, Src: Reg32> AND<R11D, Src> for Assembler<'a> {
    fn and(&mut self, dst: R11D, src: Src) {
        gen_r32_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<SIL, Src> for Assembler<'a> {
    fn and(&mut self, dst: SIL, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<R14B, Src> for Assembler<'a> {
    fn and(&mut self, dst: R14B, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg64> AND<RDX, Src> for Assembler<'a> {
    fn and(&mut self, dst: RDX, src: Src) {
        gen_r64_and(self, dst, src);
    }
}

impl<'a, Src: Reg32> AND<R15D, Src> for Assembler<'a> {
    fn and(&mut self, dst: R15D, src: Src) {
        gen_r32_and(self, dst, src);
    }
}

impl<'a, Src: Reg32> AND<R9D, Src> for Assembler<'a> {
    fn and(&mut self, dst: R9D, src: Src) {
        gen_r32_and(self, dst, src);
    }
}

impl<'a, Src: Reg16> AND<R14W, Src> for Assembler<'a> {
    fn and(&mut self, dst: R14W, src: Src) {
        gen_r16_and(self, dst, src);
    }
}

impl<'a, Src: Reg64> AND<RDI, Src> for Assembler<'a> {
    fn and(&mut self, dst: RDI, src: Src) {
        gen_r64_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<AL, Src> for Assembler<'a> {
    fn and(&mut self, dst: AL, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<R10B, Src> for Assembler<'a> {
    fn and(&mut self, dst: R10B, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg16> AND<R10W, Src> for Assembler<'a> {
    fn and(&mut self, dst: R10W, src: Src) {
        gen_r16_and(self, dst, src);
    }
}

impl<'a, Src: Reg16> AND<R13W, Src> for Assembler<'a> {
    fn and(&mut self, dst: R13W, src: Src) {
        gen_r16_and(self, dst, src);
    }
}

impl<'a, Src: Reg32> AND<R14D, Src> for Assembler<'a> {
    fn and(&mut self, dst: R14D, src: Src) {
        gen_r32_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<R8B, Src> for Assembler<'a> {
    fn and(&mut self, dst: R8B, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg16> AND<BP, Src> for Assembler<'a> {
    fn and(&mut self, dst: BP, src: Src) {
        gen_r16_and(self, dst, src);
    }
}

impl<'a, Src: Reg32> AND<R12D, Src> for Assembler<'a> {
    fn and(&mut self, dst: R12D, src: Src) {
        gen_r32_and(self, dst, src);
    }
}

impl<'a, Src: Reg64> AND<RCX, Src> for Assembler<'a> {
    fn and(&mut self, dst: RCX, src: Src) {
        gen_r64_and(self, dst, src);
    }
}

impl<'a, Src: Reg64> AND<RAX, Src> for Assembler<'a> {
    fn and(&mut self, dst: RAX, src: Src) {
        gen_r64_and(self, dst, src);
    }
}

impl<'a, Src: Reg32> AND<EDI, Src> for Assembler<'a> {
    fn and(&mut self, dst: EDI, src: Src) {
        gen_r32_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<BL, Src> for Assembler<'a> {
    fn and(&mut self, dst: BL, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<SPL, Src> for Assembler<'a> {
    fn and(&mut self, dst: SPL, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg16> AND<DI, Src> for Assembler<'a> {
    fn and(&mut self, dst: DI, src: Src) {
        gen_r16_and(self, dst, src);
    }
}

impl<'a, Src: Reg16> AND<R9W, Src> for Assembler<'a> {
    fn and(&mut self, dst: R9W, src: Src) {
        gen_r16_and(self, dst, src);
    }
}

impl<'a, Src: Reg16> AND<R15W, Src> for Assembler<'a> {
    fn and(&mut self, dst: R15W, src: Src) {
        gen_r16_and(self, dst, src);
    }
}

impl<'a, Src: Reg32> AND<EDX, Src> for Assembler<'a> {
    fn and(&mut self, dst: EDX, src: Src) {
        gen_r32_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<CH, Src> for Assembler<'a> {
    fn and(&mut self, dst: CH, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<DH, Src> for Assembler<'a> {
    fn and(&mut self, dst: DH, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<R9B, Src> for Assembler<'a> {
    fn and(&mut self, dst: R9B, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg64> AND<R13, Src> for Assembler<'a> {
    fn and(&mut self, dst: R13, src: Src) {
        gen_r64_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<DL, Src> for Assembler<'a> {
    fn and(&mut self, dst: DL, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<BPL, Src> for Assembler<'a> {
    fn and(&mut self, dst: BPL, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg8> AND<R11B, Src> for Assembler<'a> {
    fn and(&mut self, dst: R11B, src: Src) {
        gen_r8_and(self, dst, src);
    }
}

impl<'a, Src: Reg16> AND<SI, Src> for Assembler<'a> {
    fn and(&mut self, dst: SI, src: Src) {
        gen_r16_and(self, dst, src);
    }
}

impl<'a, Src: Reg64> AND<R11, Src> for Assembler<'a> {
    fn and(&mut self, dst: R11, src: Src) {
        gen_r64_and(self, dst, src);
    }
}

impl<'a, Src: Reg64> AND<R8, Src> for Assembler<'a> {
    fn and(&mut self, dst: R8, src: Src) {
        gen_r64_and(self, dst, src);
    }
}

impl<'a, Src: Reg64> AND<RSP, Src> for Assembler<'a> {
    fn and(&mut self, dst: RSP, src: Src) {
        gen_r64_and(self, dst, src);
    }
}

impl<'a, Src: Reg32> AND<R10D, Src> for Assembler<'a> {
    fn and(&mut self, dst: R10D, src: Src) {
        gen_r32_and(self, dst, src);
    }
}

impl<'a, Src: Reg32> AND<ESP, Src> for Assembler<'a> {
    fn and(&mut self, dst: ESP, src: Src) {
        gen_r32_and(self, dst, src);
    }
}

fn gen_r8_sub<'a, Dst: Reg8, Src: Reg8>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(40);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r16_sub<'a, Dst: Reg16, Src: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(41);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r32_sub<'a, Dst: Reg32, Src: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(41);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r64_sub<'a, Dst: Reg64, Src: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), true);
    builder.emit(41);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

impl<'a, Src: Reg32> SUB<R8D, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R8D, src: Src) {
        gen_r32_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<CL, Src> for Assembler<'a> {
    fn sub(&mut self, dst: CL, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<AH, Src> for Assembler<'a> {
    fn sub(&mut self, dst: AH, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg16> SUB<BX, Src> for Assembler<'a> {
    fn sub(&mut self, dst: BX, src: Src) {
        gen_r16_sub(self, dst, src);
    }
}

impl<'a, Src: Reg32> SUB<ECX, Src> for Assembler<'a> {
    fn sub(&mut self, dst: ECX, src: Src) {
        gen_r32_sub(self, dst, src);
    }
}

impl<'a, Src: Reg32> SUB<ESI, Src> for Assembler<'a> {
    fn sub(&mut self, dst: ESI, src: Src) {
        gen_r32_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<R13B, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R13B, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg16> SUB<AX, Src> for Assembler<'a> {
    fn sub(&mut self, dst: AX, src: Src) {
        gen_r16_sub(self, dst, src);
    }
}

impl<'a, Src: Reg32> SUB<EAX, Src> for Assembler<'a> {
    fn sub(&mut self, dst: EAX, src: Src) {
        gen_r32_sub(self, dst, src);
    }
}

impl<'a, Src: Reg32> SUB<EBX, Src> for Assembler<'a> {
    fn sub(&mut self, dst: EBX, src: Src) {
        gen_r32_sub(self, dst, src);
    }
}

impl<'a, Src: Reg64> SUB<RSI, Src> for Assembler<'a> {
    fn sub(&mut self, dst: RSI, src: Src) {
        gen_r64_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<R15B, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R15B, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg16> SUB<DX, Src> for Assembler<'a> {
    fn sub(&mut self, dst: DX, src: Src) {
        gen_r16_sub(self, dst, src);
    }
}

impl<'a, Src: Reg16> SUB<R8W, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R8W, src: Src) {
        gen_r16_sub(self, dst, src);
    }
}

impl<'a, Src: Reg16> SUB<R11W, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R11W, src: Src) {
        gen_r16_sub(self, dst, src);
    }
}

impl<'a, Src: Reg64> SUB<RBX, Src> for Assembler<'a> {
    fn sub(&mut self, dst: RBX, src: Src) {
        gen_r64_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<BH, Src> for Assembler<'a> {
    fn sub(&mut self, dst: BH, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<DIL, Src> for Assembler<'a> {
    fn sub(&mut self, dst: DIL, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg16> SUB<SP, Src> for Assembler<'a> {
    fn sub(&mut self, dst: SP, src: Src) {
        gen_r16_sub(self, dst, src);
    }
}

impl<'a, Src: Reg32> SUB<EBP, Src> for Assembler<'a> {
    fn sub(&mut self, dst: EBP, src: Src) {
        gen_r32_sub(self, dst, src);
    }
}

impl<'a, Src: Reg64> SUB<R14, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R14, src: Src) {
        gen_r64_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<R12B, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R12B, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg64> SUB<R10, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R10, src: Src) {
        gen_r64_sub(self, dst, src);
    }
}

impl<'a, Src: Reg64> SUB<R9, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R9, src: Src) {
        gen_r64_sub(self, dst, src);
    }
}

impl<'a, Src: Reg64> SUB<RBP, Src> for Assembler<'a> {
    fn sub(&mut self, dst: RBP, src: Src) {
        gen_r64_sub(self, dst, src);
    }
}

impl<'a, Src: Reg16> SUB<CX, Src> for Assembler<'a> {
    fn sub(&mut self, dst: CX, src: Src) {
        gen_r16_sub(self, dst, src);
    }
}

impl<'a, Src: Reg16> SUB<R12W, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R12W, src: Src) {
        gen_r16_sub(self, dst, src);
    }
}

impl<'a, Src: Reg64> SUB<R15, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R15, src: Src) {
        gen_r64_sub(self, dst, src);
    }
}

impl<'a, Src: Reg64> SUB<R12, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R12, src: Src) {
        gen_r64_sub(self, dst, src);
    }
}

impl<'a, Src: Reg32> SUB<R11D, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R11D, src: Src) {
        gen_r32_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<SIL, Src> for Assembler<'a> {
    fn sub(&mut self, dst: SIL, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<R14B, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R14B, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg64> SUB<RDX, Src> for Assembler<'a> {
    fn sub(&mut self, dst: RDX, src: Src) {
        gen_r64_sub(self, dst, src);
    }
}

impl<'a, Src: Reg32> SUB<R15D, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R15D, src: Src) {
        gen_r32_sub(self, dst, src);
    }
}

impl<'a, Src: Reg32> SUB<R9D, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R9D, src: Src) {
        gen_r32_sub(self, dst, src);
    }
}

impl<'a, Src: Reg16> SUB<R14W, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R14W, src: Src) {
        gen_r16_sub(self, dst, src);
    }
}

impl<'a, Src: Reg64> SUB<RDI, Src> for Assembler<'a> {
    fn sub(&mut self, dst: RDI, src: Src) {
        gen_r64_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<AL, Src> for Assembler<'a> {
    fn sub(&mut self, dst: AL, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<R10B, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R10B, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg16> SUB<R10W, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R10W, src: Src) {
        gen_r16_sub(self, dst, src);
    }
}

impl<'a, Src: Reg16> SUB<R13W, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R13W, src: Src) {
        gen_r16_sub(self, dst, src);
    }
}

impl<'a, Src: Reg32> SUB<R14D, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R14D, src: Src) {
        gen_r32_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<R8B, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R8B, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg16> SUB<BP, Src> for Assembler<'a> {
    fn sub(&mut self, dst: BP, src: Src) {
        gen_r16_sub(self, dst, src);
    }
}

impl<'a, Src: Reg32> SUB<R12D, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R12D, src: Src) {
        gen_r32_sub(self, dst, src);
    }
}

impl<'a, Src: Reg64> SUB<RCX, Src> for Assembler<'a> {
    fn sub(&mut self, dst: RCX, src: Src) {
        gen_r64_sub(self, dst, src);
    }
}

impl<'a, Src: Reg64> SUB<RAX, Src> for Assembler<'a> {
    fn sub(&mut self, dst: RAX, src: Src) {
        gen_r64_sub(self, dst, src);
    }
}

impl<'a, Src: Reg32> SUB<EDI, Src> for Assembler<'a> {
    fn sub(&mut self, dst: EDI, src: Src) {
        gen_r32_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<BL, Src> for Assembler<'a> {
    fn sub(&mut self, dst: BL, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<SPL, Src> for Assembler<'a> {
    fn sub(&mut self, dst: SPL, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg16> SUB<DI, Src> for Assembler<'a> {
    fn sub(&mut self, dst: DI, src: Src) {
        gen_r16_sub(self, dst, src);
    }
}

impl<'a, Src: Reg16> SUB<R9W, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R9W, src: Src) {
        gen_r16_sub(self, dst, src);
    }
}

impl<'a, Src: Reg16> SUB<R15W, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R15W, src: Src) {
        gen_r16_sub(self, dst, src);
    }
}

impl<'a, Src: Reg32> SUB<EDX, Src> for Assembler<'a> {
    fn sub(&mut self, dst: EDX, src: Src) {
        gen_r32_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<CH, Src> for Assembler<'a> {
    fn sub(&mut self, dst: CH, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<DH, Src> for Assembler<'a> {
    fn sub(&mut self, dst: DH, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<R9B, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R9B, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg64> SUB<R13, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R13, src: Src) {
        gen_r64_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<DL, Src> for Assembler<'a> {
    fn sub(&mut self, dst: DL, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<BPL, Src> for Assembler<'a> {
    fn sub(&mut self, dst: BPL, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg8> SUB<R11B, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R11B, src: Src) {
        gen_r8_sub(self, dst, src);
    }
}

impl<'a, Src: Reg16> SUB<SI, Src> for Assembler<'a> {
    fn sub(&mut self, dst: SI, src: Src) {
        gen_r16_sub(self, dst, src);
    }
}

impl<'a, Src: Reg64> SUB<R11, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R11, src: Src) {
        gen_r64_sub(self, dst, src);
    }
}

impl<'a, Src: Reg64> SUB<R8, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R8, src: Src) {
        gen_r64_sub(self, dst, src);
    }
}

impl<'a, Src: Reg64> SUB<RSP, Src> for Assembler<'a> {
    fn sub(&mut self, dst: RSP, src: Src) {
        gen_r64_sub(self, dst, src);
    }
}

impl<'a, Src: Reg32> SUB<R10D, Src> for Assembler<'a> {
    fn sub(&mut self, dst: R10D, src: Src) {
        gen_r32_sub(self, dst, src);
    }
}

impl<'a, Src: Reg32> SUB<ESP, Src> for Assembler<'a> {
    fn sub(&mut self, dst: ESP, src: Src) {
        gen_r32_sub(self, dst, src);
    }
}

fn gen_r8_xor<'a, Dst: Reg8, Src: Reg8>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(48);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r16_xor<'a, Dst: Reg16, Src: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(49);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r32_xor<'a, Dst: Reg32, Src: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(49);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r64_xor<'a, Dst: Reg64, Src: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), true);
    builder.emit(49);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

impl<'a, Src: Reg32> XOR<R8D, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R8D, src: Src) {
        gen_r32_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<CL, Src> for Assembler<'a> {
    fn xor(&mut self, dst: CL, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<AH, Src> for Assembler<'a> {
    fn xor(&mut self, dst: AH, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg16> XOR<BX, Src> for Assembler<'a> {
    fn xor(&mut self, dst: BX, src: Src) {
        gen_r16_xor(self, dst, src);
    }
}

impl<'a, Src: Reg32> XOR<ECX, Src> for Assembler<'a> {
    fn xor(&mut self, dst: ECX, src: Src) {
        gen_r32_xor(self, dst, src);
    }
}

impl<'a, Src: Reg32> XOR<ESI, Src> for Assembler<'a> {
    fn xor(&mut self, dst: ESI, src: Src) {
        gen_r32_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<R13B, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R13B, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg16> XOR<AX, Src> for Assembler<'a> {
    fn xor(&mut self, dst: AX, src: Src) {
        gen_r16_xor(self, dst, src);
    }
}

impl<'a, Src: Reg32> XOR<EAX, Src> for Assembler<'a> {
    fn xor(&mut self, dst: EAX, src: Src) {
        gen_r32_xor(self, dst, src);
    }
}

impl<'a, Src: Reg32> XOR<EBX, Src> for Assembler<'a> {
    fn xor(&mut self, dst: EBX, src: Src) {
        gen_r32_xor(self, dst, src);
    }
}

impl<'a, Src: Reg64> XOR<RSI, Src> for Assembler<'a> {
    fn xor(&mut self, dst: RSI, src: Src) {
        gen_r64_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<R15B, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R15B, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg16> XOR<DX, Src> for Assembler<'a> {
    fn xor(&mut self, dst: DX, src: Src) {
        gen_r16_xor(self, dst, src);
    }
}

impl<'a, Src: Reg16> XOR<R8W, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R8W, src: Src) {
        gen_r16_xor(self, dst, src);
    }
}

impl<'a, Src: Reg16> XOR<R11W, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R11W, src: Src) {
        gen_r16_xor(self, dst, src);
    }
}

impl<'a, Src: Reg64> XOR<RBX, Src> for Assembler<'a> {
    fn xor(&mut self, dst: RBX, src: Src) {
        gen_r64_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<BH, Src> for Assembler<'a> {
    fn xor(&mut self, dst: BH, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<DIL, Src> for Assembler<'a> {
    fn xor(&mut self, dst: DIL, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg16> XOR<SP, Src> for Assembler<'a> {
    fn xor(&mut self, dst: SP, src: Src) {
        gen_r16_xor(self, dst, src);
    }
}

impl<'a, Src: Reg32> XOR<EBP, Src> for Assembler<'a> {
    fn xor(&mut self, dst: EBP, src: Src) {
        gen_r32_xor(self, dst, src);
    }
}

impl<'a, Src: Reg64> XOR<R14, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R14, src: Src) {
        gen_r64_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<R12B, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R12B, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg64> XOR<R10, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R10, src: Src) {
        gen_r64_xor(self, dst, src);
    }
}

impl<'a, Src: Reg64> XOR<R9, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R9, src: Src) {
        gen_r64_xor(self, dst, src);
    }
}

impl<'a, Src: Reg64> XOR<RBP, Src> for Assembler<'a> {
    fn xor(&mut self, dst: RBP, src: Src) {
        gen_r64_xor(self, dst, src);
    }
}

impl<'a, Src: Reg16> XOR<CX, Src> for Assembler<'a> {
    fn xor(&mut self, dst: CX, src: Src) {
        gen_r16_xor(self, dst, src);
    }
}

impl<'a, Src: Reg16> XOR<R12W, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R12W, src: Src) {
        gen_r16_xor(self, dst, src);
    }
}

impl<'a, Src: Reg64> XOR<R15, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R15, src: Src) {
        gen_r64_xor(self, dst, src);
    }
}

impl<'a, Src: Reg64> XOR<R12, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R12, src: Src) {
        gen_r64_xor(self, dst, src);
    }
}

impl<'a, Src: Reg32> XOR<R11D, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R11D, src: Src) {
        gen_r32_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<SIL, Src> for Assembler<'a> {
    fn xor(&mut self, dst: SIL, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<R14B, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R14B, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg64> XOR<RDX, Src> for Assembler<'a> {
    fn xor(&mut self, dst: RDX, src: Src) {
        gen_r64_xor(self, dst, src);
    }
}

impl<'a, Src: Reg32> XOR<R15D, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R15D, src: Src) {
        gen_r32_xor(self, dst, src);
    }
}

impl<'a, Src: Reg32> XOR<R9D, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R9D, src: Src) {
        gen_r32_xor(self, dst, src);
    }
}

impl<'a, Src: Reg16> XOR<R14W, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R14W, src: Src) {
        gen_r16_xor(self, dst, src);
    }
}

impl<'a, Src: Reg64> XOR<RDI, Src> for Assembler<'a> {
    fn xor(&mut self, dst: RDI, src: Src) {
        gen_r64_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<AL, Src> for Assembler<'a> {
    fn xor(&mut self, dst: AL, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<R10B, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R10B, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg16> XOR<R10W, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R10W, src: Src) {
        gen_r16_xor(self, dst, src);
    }
}

impl<'a, Src: Reg16> XOR<R13W, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R13W, src: Src) {
        gen_r16_xor(self, dst, src);
    }
}

impl<'a, Src: Reg32> XOR<R14D, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R14D, src: Src) {
        gen_r32_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<R8B, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R8B, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg16> XOR<BP, Src> for Assembler<'a> {
    fn xor(&mut self, dst: BP, src: Src) {
        gen_r16_xor(self, dst, src);
    }
}

impl<'a, Src: Reg32> XOR<R12D, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R12D, src: Src) {
        gen_r32_xor(self, dst, src);
    }
}

impl<'a, Src: Reg64> XOR<RCX, Src> for Assembler<'a> {
    fn xor(&mut self, dst: RCX, src: Src) {
        gen_r64_xor(self, dst, src);
    }
}

impl<'a, Src: Reg64> XOR<RAX, Src> for Assembler<'a> {
    fn xor(&mut self, dst: RAX, src: Src) {
        gen_r64_xor(self, dst, src);
    }
}

impl<'a, Src: Reg32> XOR<EDI, Src> for Assembler<'a> {
    fn xor(&mut self, dst: EDI, src: Src) {
        gen_r32_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<BL, Src> for Assembler<'a> {
    fn xor(&mut self, dst: BL, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<SPL, Src> for Assembler<'a> {
    fn xor(&mut self, dst: SPL, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg16> XOR<DI, Src> for Assembler<'a> {
    fn xor(&mut self, dst: DI, src: Src) {
        gen_r16_xor(self, dst, src);
    }
}

impl<'a, Src: Reg16> XOR<R9W, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R9W, src: Src) {
        gen_r16_xor(self, dst, src);
    }
}

impl<'a, Src: Reg16> XOR<R15W, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R15W, src: Src) {
        gen_r16_xor(self, dst, src);
    }
}

impl<'a, Src: Reg32> XOR<EDX, Src> for Assembler<'a> {
    fn xor(&mut self, dst: EDX, src: Src) {
        gen_r32_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<CH, Src> for Assembler<'a> {
    fn xor(&mut self, dst: CH, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<DH, Src> for Assembler<'a> {
    fn xor(&mut self, dst: DH, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<R9B, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R9B, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg64> XOR<R13, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R13, src: Src) {
        gen_r64_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<DL, Src> for Assembler<'a> {
    fn xor(&mut self, dst: DL, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<BPL, Src> for Assembler<'a> {
    fn xor(&mut self, dst: BPL, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg8> XOR<R11B, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R11B, src: Src) {
        gen_r8_xor(self, dst, src);
    }
}

impl<'a, Src: Reg16> XOR<SI, Src> for Assembler<'a> {
    fn xor(&mut self, dst: SI, src: Src) {
        gen_r16_xor(self, dst, src);
    }
}

impl<'a, Src: Reg64> XOR<R11, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R11, src: Src) {
        gen_r64_xor(self, dst, src);
    }
}

impl<'a, Src: Reg64> XOR<R8, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R8, src: Src) {
        gen_r64_xor(self, dst, src);
    }
}

impl<'a, Src: Reg64> XOR<RSP, Src> for Assembler<'a> {
    fn xor(&mut self, dst: RSP, src: Src) {
        gen_r64_xor(self, dst, src);
    }
}

impl<'a, Src: Reg32> XOR<R10D, Src> for Assembler<'a> {
    fn xor(&mut self, dst: R10D, src: Src) {
        gen_r32_xor(self, dst, src);
    }
}

impl<'a, Src: Reg32> XOR<ESP, Src> for Assembler<'a> {
    fn xor(&mut self, dst: ESP, src: Src) {
        gen_r32_xor(self, dst, src);
    }
}

fn gen_r8_cmp<'a, Dst: Reg8, Src: Reg8>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(56);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r16_cmp<'a, Dst: Reg16, Src: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(57);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r32_cmp<'a, Dst: Reg32, Src: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), false);
    }

    builder.emit(57);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

fn gen_r64_cmp<'a, Dst: Reg64, Src: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: Src) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(src.needs_ext(), false, dst.needs_ext(), true);
    builder.emit(57);
    builder.emit_mod_reg_rm(Mod::Register, dst.code(), src.code());
    asm.append(&builder);
}

impl<'a, Src: Reg32> CMP<R8D, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R8D, src: Src) {
        gen_r32_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<CL, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: CL, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<AH, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: AH, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg16> CMP<BX, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: BX, src: Src) {
        gen_r16_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg32> CMP<ECX, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: ECX, src: Src) {
        gen_r32_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg32> CMP<ESI, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: ESI, src: Src) {
        gen_r32_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<R13B, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R13B, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg16> CMP<AX, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: AX, src: Src) {
        gen_r16_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg32> CMP<EAX, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: EAX, src: Src) {
        gen_r32_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg32> CMP<EBX, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: EBX, src: Src) {
        gen_r32_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg64> CMP<RSI, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: RSI, src: Src) {
        gen_r64_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<R15B, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R15B, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg16> CMP<DX, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: DX, src: Src) {
        gen_r16_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg16> CMP<R8W, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R8W, src: Src) {
        gen_r16_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg16> CMP<R11W, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R11W, src: Src) {
        gen_r16_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg64> CMP<RBX, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: RBX, src: Src) {
        gen_r64_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<BH, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: BH, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<DIL, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: DIL, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg16> CMP<SP, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: SP, src: Src) {
        gen_r16_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg32> CMP<EBP, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: EBP, src: Src) {
        gen_r32_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg64> CMP<R14, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R14, src: Src) {
        gen_r64_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<R12B, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R12B, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg64> CMP<R10, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R10, src: Src) {
        gen_r64_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg64> CMP<R9, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R9, src: Src) {
        gen_r64_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg64> CMP<RBP, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: RBP, src: Src) {
        gen_r64_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg16> CMP<CX, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: CX, src: Src) {
        gen_r16_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg16> CMP<R12W, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R12W, src: Src) {
        gen_r16_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg64> CMP<R15, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R15, src: Src) {
        gen_r64_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg64> CMP<R12, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R12, src: Src) {
        gen_r64_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg32> CMP<R11D, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R11D, src: Src) {
        gen_r32_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<SIL, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: SIL, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<R14B, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R14B, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg64> CMP<RDX, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: RDX, src: Src) {
        gen_r64_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg32> CMP<R15D, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R15D, src: Src) {
        gen_r32_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg32> CMP<R9D, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R9D, src: Src) {
        gen_r32_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg16> CMP<R14W, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R14W, src: Src) {
        gen_r16_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg64> CMP<RDI, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: RDI, src: Src) {
        gen_r64_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<AL, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: AL, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<R10B, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R10B, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg16> CMP<R10W, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R10W, src: Src) {
        gen_r16_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg16> CMP<R13W, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R13W, src: Src) {
        gen_r16_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg32> CMP<R14D, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R14D, src: Src) {
        gen_r32_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<R8B, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R8B, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg16> CMP<BP, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: BP, src: Src) {
        gen_r16_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg32> CMP<R12D, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R12D, src: Src) {
        gen_r32_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg64> CMP<RCX, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: RCX, src: Src) {
        gen_r64_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg64> CMP<RAX, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: RAX, src: Src) {
        gen_r64_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg32> CMP<EDI, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: EDI, src: Src) {
        gen_r32_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<BL, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: BL, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<SPL, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: SPL, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg16> CMP<DI, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: DI, src: Src) {
        gen_r16_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg16> CMP<R9W, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R9W, src: Src) {
        gen_r16_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg16> CMP<R15W, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R15W, src: Src) {
        gen_r16_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg32> CMP<EDX, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: EDX, src: Src) {
        gen_r32_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<CH, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: CH, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<DH, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: DH, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<R9B, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R9B, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg64> CMP<R13, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R13, src: Src) {
        gen_r64_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<DL, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: DL, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<BPL, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: BPL, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg8> CMP<R11B, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R11B, src: Src) {
        gen_r8_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg16> CMP<SI, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: SI, src: Src) {
        gen_r16_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg64> CMP<R11, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R11, src: Src) {
        gen_r64_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg64> CMP<R8, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R8, src: Src) {
        gen_r64_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg64> CMP<RSP, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: RSP, src: Src) {
        gen_r64_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg32> CMP<R10D, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: R10D, src: Src) {
        gen_r32_cmp(self, dst, src);
    }
}

impl<'a, Src: Reg32> CMP<ESP, Src> for Assembler<'a> {
    fn cmp(&mut self, dst: ESP, src: Src) {
        gen_r32_cmp(self, dst, src);
    }
}

fn gen_r8_i8_add<'a, Dst: Reg8>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

    builder.emit(0x80);
    builder.emit_mod_reg_rm(Mod::Register, 0, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r16_i8_add<'a, Dst: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 0, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r16_i16_add<'a, Dst: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: i16) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 0, dst.code());
    builder.emit_imm_i16(src);
    asm.append(&builder);
}

fn gen_r32_i8_add<'a, Dst: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 0, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r64_i8_add<'a, Dst: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(false, false, dst.needs_ext(), true);
   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 0, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r32_i32_add<'a, Dst: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: i32) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 0, dst.code());
    builder.emit_imm_i32(src);
    asm.append(&builder);
}

fn gen_r64_i32_add<'a, Dst: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: i32) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(false, false, dst.needs_ext(), true);
   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 0, dst.code());
    builder.emit_imm_i32(src);
    asm.append(&builder);
}

fn gen_r8_i8_or<'a, Dst: Reg8>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

    builder.emit(0x80);
    builder.emit_mod_reg_rm(Mod::Register, 1, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r16_i8_or<'a, Dst: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 1, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r16_i16_or<'a, Dst: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: i16) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 1, dst.code());
    builder.emit_imm_i16(src);
    asm.append(&builder);
}

fn gen_r32_i8_or<'a, Dst: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 1, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r64_i8_or<'a, Dst: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(false, false, dst.needs_ext(), true);
   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 1, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r32_i32_or<'a, Dst: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: i32) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 1, dst.code());
    builder.emit_imm_i32(src);
    asm.append(&builder);
}

fn gen_r64_i32_or<'a, Dst: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: i32) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(false, false, dst.needs_ext(), true);
   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 1, dst.code());
    builder.emit_imm_i32(src);
    asm.append(&builder);
}

fn gen_r8_i8_adc<'a, Dst: Reg8>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

    builder.emit(0x80);
    builder.emit_mod_reg_rm(Mod::Register, 2, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r16_i8_adc<'a, Dst: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 2, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r16_i16_adc<'a, Dst: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: i16) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 2, dst.code());
    builder.emit_imm_i16(src);
    asm.append(&builder);
}

fn gen_r32_i8_adc<'a, Dst: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 2, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r64_i8_adc<'a, Dst: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(false, false, dst.needs_ext(), true);
   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 2, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r32_i32_adc<'a, Dst: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: i32) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 2, dst.code());
    builder.emit_imm_i32(src);
    asm.append(&builder);
}

fn gen_r64_i32_adc<'a, Dst: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: i32) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(false, false, dst.needs_ext(), true);
   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 2, dst.code());
    builder.emit_imm_i32(src);
    asm.append(&builder);
}

fn gen_r8_i8_sbb<'a, Dst: Reg8>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

    builder.emit(0x80);
    builder.emit_mod_reg_rm(Mod::Register, 3, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r16_i8_sbb<'a, Dst: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 3, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r16_i16_sbb<'a, Dst: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: i16) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 3, dst.code());
    builder.emit_imm_i16(src);
    asm.append(&builder);
}

fn gen_r32_i8_sbb<'a, Dst: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 3, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r64_i8_sbb<'a, Dst: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(false, false, dst.needs_ext(), true);
   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 3, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r32_i32_sbb<'a, Dst: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: i32) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 3, dst.code());
    builder.emit_imm_i32(src);
    asm.append(&builder);
}

fn gen_r64_i32_sbb<'a, Dst: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: i32) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(false, false, dst.needs_ext(), true);
   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 3, dst.code());
    builder.emit_imm_i32(src);
    asm.append(&builder);
}

fn gen_r8_i8_and<'a, Dst: Reg8>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

    builder.emit(0x80);
    builder.emit_mod_reg_rm(Mod::Register, 4, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r16_i8_and<'a, Dst: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 4, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r16_i16_and<'a, Dst: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: i16) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 4, dst.code());
    builder.emit_imm_i16(src);
    asm.append(&builder);
}

fn gen_r32_i8_and<'a, Dst: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 4, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r64_i8_and<'a, Dst: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(false, false, dst.needs_ext(), true);
   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 4, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r32_i32_and<'a, Dst: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: i32) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 4, dst.code());
    builder.emit_imm_i32(src);
    asm.append(&builder);
}

fn gen_r64_i32_and<'a, Dst: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: i32) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(false, false, dst.needs_ext(), true);
   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 4, dst.code());
    builder.emit_imm_i32(src);
    asm.append(&builder);
}

fn gen_r8_i8_sub<'a, Dst: Reg8>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

    builder.emit(0x80);
    builder.emit_mod_reg_rm(Mod::Register, 5, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r16_i8_sub<'a, Dst: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 5, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r16_i16_sub<'a, Dst: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: i16) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 5, dst.code());
    builder.emit_imm_i16(src);
    asm.append(&builder);
}

fn gen_r32_i8_sub<'a, Dst: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 5, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r64_i8_sub<'a, Dst: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(false, false, dst.needs_ext(), true);
   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 5, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r32_i32_sub<'a, Dst: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: i32) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 5, dst.code());
    builder.emit_imm_i32(src);
    asm.append(&builder);
}

fn gen_r64_i32_sub<'a, Dst: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: i32) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(false, false, dst.needs_ext(), true);
   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 5, dst.code());
    builder.emit_imm_i32(src);
    asm.append(&builder);
}

fn gen_r8_i8_xor<'a, Dst: Reg8>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

    builder.emit(0x80);
    builder.emit_mod_reg_rm(Mod::Register, 6, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r16_i8_xor<'a, Dst: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 6, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r16_i16_xor<'a, Dst: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: i16) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 6, dst.code());
    builder.emit_imm_i16(src);
    asm.append(&builder);
}

fn gen_r32_i8_xor<'a, Dst: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 6, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r64_i8_xor<'a, Dst: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(false, false, dst.needs_ext(), true);
   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 6, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r32_i32_xor<'a, Dst: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: i32) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 6, dst.code());
    builder.emit_imm_i32(src);
    asm.append(&builder);
}

fn gen_r64_i32_xor<'a, Dst: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: i32) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(false, false, dst.needs_ext(), true);
   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 6, dst.code());
    builder.emit_imm_i32(src);
    asm.append(&builder);
}

fn gen_r8_i8_cmp<'a, Dst: Reg8>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

    builder.emit(0x80);
    builder.emit_mod_reg_rm(Mod::Register, 7, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r16_i8_cmp<'a, Dst: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 7, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r16_i16_cmp<'a, Dst: Reg16>(asm: &mut Assembler<'a>, dst: Dst, src: i16) {
    let mut builder = InstructionBuilder::new();

    builder.emit_operand_size_prefix();
    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 7, dst.code());
    builder.emit_imm_i16(src);
    asm.append(&builder);
}

fn gen_r32_i8_cmp<'a, Dst: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 7, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r64_i8_cmp<'a, Dst: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: i8) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(false, false, dst.needs_ext(), true);
   builder.emit(0x83);
    builder.emit_mod_reg_rm(Mod::Register, 7, dst.code());
    builder.emit_imm_i8(src);
    asm.append(&builder);
}

fn gen_r32_i32_cmp<'a, Dst: Reg32>(asm: &mut Assembler<'a>, dst: Dst, src: i32) {
    let mut builder = InstructionBuilder::new();

    if dst.needs_rex() {
        builder.emit_rex(false, false, dst.needs_ext(), false);
    }

   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 7, dst.code());
    builder.emit_imm_i32(src);
    asm.append(&builder);
}

fn gen_r64_i32_cmp<'a, Dst: Reg64>(asm: &mut Assembler<'a>, dst: Dst, src: i32) {
    let mut builder = InstructionBuilder::new();

    builder.emit_rex(false, false, dst.needs_ext(), true);
   builder.emit(0x81);
    builder.emit_mod_reg_rm(Mod::Register, 7, dst.code());
    builder.emit_imm_i32(src);
    asm.append(&builder);
}

impl<'a> ADD<CL, i8> for Assembler<'a> {
    fn add(&mut self, dst: CL, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<AH, i8> for Assembler<'a> {
    fn add(&mut self, dst: AH, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R13B, i8> for Assembler<'a> {
    fn add(&mut self, dst: R13B, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R15B, i8> for Assembler<'a> {
    fn add(&mut self, dst: R15B, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<BH, i8> for Assembler<'a> {
    fn add(&mut self, dst: BH, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<DIL, i8> for Assembler<'a> {
    fn add(&mut self, dst: DIL, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R12B, i8> for Assembler<'a> {
    fn add(&mut self, dst: R12B, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<SIL, i8> for Assembler<'a> {
    fn add(&mut self, dst: SIL, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R14B, i8> for Assembler<'a> {
    fn add(&mut self, dst: R14B, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R10B, i8> for Assembler<'a> {
    fn add(&mut self, dst: R10B, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R8B, i8> for Assembler<'a> {
    fn add(&mut self, dst: R8B, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<BL, i8> for Assembler<'a> {
    fn add(&mut self, dst: BL, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<SPL, i8> for Assembler<'a> {
    fn add(&mut self, dst: SPL, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<CH, i8> for Assembler<'a> {
    fn add(&mut self, dst: CH, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<DH, i8> for Assembler<'a> {
    fn add(&mut self, dst: DH, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R9B, i8> for Assembler<'a> {
    fn add(&mut self, dst: R9B, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<DL, i8> for Assembler<'a> {
    fn add(&mut self, dst: DL, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<BPL, i8> for Assembler<'a> {
    fn add(&mut self, dst: BPL, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R11B, i8> for Assembler<'a> {
    fn add(&mut self, dst: R11B, src: i8) {
        gen_r8_i8_add(self, dst, src);
    }
}

impl<'a> ADD<BX, i8> for Assembler<'a> {
    fn add(&mut self, dst: BX, src: i8) {
        gen_r16_i8_add(self, dst, src);
    }
}

impl<'a> ADD<BX, i16> for Assembler<'a> {
    fn add(&mut self, dst: BX, src: i16) {
        gen_r16_i16_add(self, dst, src);
    }
}

impl<'a> ADD<AX, i8> for Assembler<'a> {
    fn add(&mut self, dst: AX, src: i8) {
        gen_r16_i8_add(self, dst, src);
    }
}

impl<'a> ADD<AX, i16> for Assembler<'a> {
    fn add(&mut self, dst: AX, src: i16) {
        gen_r16_i16_add(self, dst, src);
    }
}

impl<'a> ADD<DX, i8> for Assembler<'a> {
    fn add(&mut self, dst: DX, src: i8) {
        gen_r16_i8_add(self, dst, src);
    }
}

impl<'a> ADD<DX, i16> for Assembler<'a> {
    fn add(&mut self, dst: DX, src: i16) {
        gen_r16_i16_add(self, dst, src);
    }
}

impl<'a> ADD<R8W, i8> for Assembler<'a> {
    fn add(&mut self, dst: R8W, src: i8) {
        gen_r16_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R8W, i16> for Assembler<'a> {
    fn add(&mut self, dst: R8W, src: i16) {
        gen_r16_i16_add(self, dst, src);
    }
}

impl<'a> ADD<R11W, i8> for Assembler<'a> {
    fn add(&mut self, dst: R11W, src: i8) {
        gen_r16_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R11W, i16> for Assembler<'a> {
    fn add(&mut self, dst: R11W, src: i16) {
        gen_r16_i16_add(self, dst, src);
    }
}

impl<'a> ADD<SP, i8> for Assembler<'a> {
    fn add(&mut self, dst: SP, src: i8) {
        gen_r16_i8_add(self, dst, src);
    }
}

impl<'a> ADD<SP, i16> for Assembler<'a> {
    fn add(&mut self, dst: SP, src: i16) {
        gen_r16_i16_add(self, dst, src);
    }
}

impl<'a> ADD<CX, i8> for Assembler<'a> {
    fn add(&mut self, dst: CX, src: i8) {
        gen_r16_i8_add(self, dst, src);
    }
}

impl<'a> ADD<CX, i16> for Assembler<'a> {
    fn add(&mut self, dst: CX, src: i16) {
        gen_r16_i16_add(self, dst, src);
    }
}

impl<'a> ADD<R12W, i8> for Assembler<'a> {
    fn add(&mut self, dst: R12W, src: i8) {
        gen_r16_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R12W, i16> for Assembler<'a> {
    fn add(&mut self, dst: R12W, src: i16) {
        gen_r16_i16_add(self, dst, src);
    }
}

impl<'a> ADD<R14W, i8> for Assembler<'a> {
    fn add(&mut self, dst: R14W, src: i8) {
        gen_r16_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R14W, i16> for Assembler<'a> {
    fn add(&mut self, dst: R14W, src: i16) {
        gen_r16_i16_add(self, dst, src);
    }
}

impl<'a> ADD<R10W, i8> for Assembler<'a> {
    fn add(&mut self, dst: R10W, src: i8) {
        gen_r16_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R10W, i16> for Assembler<'a> {
    fn add(&mut self, dst: R10W, src: i16) {
        gen_r16_i16_add(self, dst, src);
    }
}

impl<'a> ADD<R13W, i8> for Assembler<'a> {
    fn add(&mut self, dst: R13W, src: i8) {
        gen_r16_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R13W, i16> for Assembler<'a> {
    fn add(&mut self, dst: R13W, src: i16) {
        gen_r16_i16_add(self, dst, src);
    }
}

impl<'a> ADD<BP, i8> for Assembler<'a> {
    fn add(&mut self, dst: BP, src: i8) {
        gen_r16_i8_add(self, dst, src);
    }
}

impl<'a> ADD<BP, i16> for Assembler<'a> {
    fn add(&mut self, dst: BP, src: i16) {
        gen_r16_i16_add(self, dst, src);
    }
}

impl<'a> ADD<DI, i8> for Assembler<'a> {
    fn add(&mut self, dst: DI, src: i8) {
        gen_r16_i8_add(self, dst, src);
    }
}

impl<'a> ADD<DI, i16> for Assembler<'a> {
    fn add(&mut self, dst: DI, src: i16) {
        gen_r16_i16_add(self, dst, src);
    }
}

impl<'a> ADD<R9W, i8> for Assembler<'a> {
    fn add(&mut self, dst: R9W, src: i8) {
        gen_r16_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R9W, i16> for Assembler<'a> {
    fn add(&mut self, dst: R9W, src: i16) {
        gen_r16_i16_add(self, dst, src);
    }
}

impl<'a> ADD<R15W, i8> for Assembler<'a> {
    fn add(&mut self, dst: R15W, src: i8) {
        gen_r16_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R15W, i16> for Assembler<'a> {
    fn add(&mut self, dst: R15W, src: i16) {
        gen_r16_i16_add(self, dst, src);
    }
}

impl<'a> ADD<SI, i8> for Assembler<'a> {
    fn add(&mut self, dst: SI, src: i8) {
        gen_r16_i8_add(self, dst, src);
    }
}

impl<'a> ADD<SI, i16> for Assembler<'a> {
    fn add(&mut self, dst: SI, src: i16) {
        gen_r16_i16_add(self, dst, src);
    }
}

impl<'a> ADD<R8D, i8> for Assembler<'a> {
    fn add(&mut self, dst: R8D, src: i8) {
        gen_r32_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R8D, i32> for Assembler<'a> {
    fn add(&mut self, dst: R8D, src: i32) {
        gen_r32_i32_add(self, dst, src);
    }
}

impl<'a> ADD<ECX, i8> for Assembler<'a> {
    fn add(&mut self, dst: ECX, src: i8) {
        gen_r32_i8_add(self, dst, src);
    }
}

impl<'a> ADD<ECX, i32> for Assembler<'a> {
    fn add(&mut self, dst: ECX, src: i32) {
        gen_r32_i32_add(self, dst, src);
    }
}

impl<'a> ADD<ESI, i8> for Assembler<'a> {
    fn add(&mut self, dst: ESI, src: i8) {
        gen_r32_i8_add(self, dst, src);
    }
}

impl<'a> ADD<ESI, i32> for Assembler<'a> {
    fn add(&mut self, dst: ESI, src: i32) {
        gen_r32_i32_add(self, dst, src);
    }
}

impl<'a> ADD<EAX, i8> for Assembler<'a> {
    fn add(&mut self, dst: EAX, src: i8) {
        gen_r32_i8_add(self, dst, src);
    }
}

impl<'a> ADD<EAX, i32> for Assembler<'a> {
    fn add(&mut self, dst: EAX, src: i32) {
        gen_r32_i32_add(self, dst, src);
    }
}

impl<'a> ADD<EBX, i8> for Assembler<'a> {
    fn add(&mut self, dst: EBX, src: i8) {
        gen_r32_i8_add(self, dst, src);
    }
}

impl<'a> ADD<EBX, i32> for Assembler<'a> {
    fn add(&mut self, dst: EBX, src: i32) {
        gen_r32_i32_add(self, dst, src);
    }
}

impl<'a> ADD<RSI, i8> for Assembler<'a> {
    fn add(&mut self, dst: RSI, src: i8) {
        gen_r64_i8_add(self, dst, src);
    }
}

impl<'a> ADD<RSI, i32> for Assembler<'a> {
    fn add(&mut self, dst: RSI, src: i32) {
        gen_r64_i32_add(self, dst, src);
    }
}

impl<'a> ADD<RBX, i8> for Assembler<'a> {
    fn add(&mut self, dst: RBX, src: i8) {
        gen_r64_i8_add(self, dst, src);
    }
}

impl<'a> ADD<RBX, i32> for Assembler<'a> {
    fn add(&mut self, dst: RBX, src: i32) {
        gen_r64_i32_add(self, dst, src);
    }
}

impl<'a> ADD<EBP, i8> for Assembler<'a> {
    fn add(&mut self, dst: EBP, src: i8) {
        gen_r32_i8_add(self, dst, src);
    }
}

impl<'a> ADD<EBP, i32> for Assembler<'a> {
    fn add(&mut self, dst: EBP, src: i32) {
        gen_r32_i32_add(self, dst, src);
    }
}

impl<'a> ADD<R14, i8> for Assembler<'a> {
    fn add(&mut self, dst: R14, src: i8) {
        gen_r64_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R14, i32> for Assembler<'a> {
    fn add(&mut self, dst: R14, src: i32) {
        gen_r64_i32_add(self, dst, src);
    }
}

impl<'a> ADD<R10, i8> for Assembler<'a> {
    fn add(&mut self, dst: R10, src: i8) {
        gen_r64_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R10, i32> for Assembler<'a> {
    fn add(&mut self, dst: R10, src: i32) {
        gen_r64_i32_add(self, dst, src);
    }
}

impl<'a> ADD<R9, i8> for Assembler<'a> {
    fn add(&mut self, dst: R9, src: i8) {
        gen_r64_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R9, i32> for Assembler<'a> {
    fn add(&mut self, dst: R9, src: i32) {
        gen_r64_i32_add(self, dst, src);
    }
}

impl<'a> ADD<RBP, i8> for Assembler<'a> {
    fn add(&mut self, dst: RBP, src: i8) {
        gen_r64_i8_add(self, dst, src);
    }
}

impl<'a> ADD<RBP, i32> for Assembler<'a> {
    fn add(&mut self, dst: RBP, src: i32) {
        gen_r64_i32_add(self, dst, src);
    }
}

impl<'a> ADD<R15, i8> for Assembler<'a> {
    fn add(&mut self, dst: R15, src: i8) {
        gen_r64_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R15, i32> for Assembler<'a> {
    fn add(&mut self, dst: R15, src: i32) {
        gen_r64_i32_add(self, dst, src);
    }
}

impl<'a> ADD<R12, i8> for Assembler<'a> {
    fn add(&mut self, dst: R12, src: i8) {
        gen_r64_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R12, i32> for Assembler<'a> {
    fn add(&mut self, dst: R12, src: i32) {
        gen_r64_i32_add(self, dst, src);
    }
}

impl<'a> ADD<R11D, i8> for Assembler<'a> {
    fn add(&mut self, dst: R11D, src: i8) {
        gen_r32_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R11D, i32> for Assembler<'a> {
    fn add(&mut self, dst: R11D, src: i32) {
        gen_r32_i32_add(self, dst, src);
    }
}

impl<'a> ADD<RDX, i8> for Assembler<'a> {
    fn add(&mut self, dst: RDX, src: i8) {
        gen_r64_i8_add(self, dst, src);
    }
}

impl<'a> ADD<RDX, i32> for Assembler<'a> {
    fn add(&mut self, dst: RDX, src: i32) {
        gen_r64_i32_add(self, dst, src);
    }
}

impl<'a> ADD<R15D, i8> for Assembler<'a> {
    fn add(&mut self, dst: R15D, src: i8) {
        gen_r32_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R15D, i32> for Assembler<'a> {
    fn add(&mut self, dst: R15D, src: i32) {
        gen_r32_i32_add(self, dst, src);
    }
}

impl<'a> ADD<R9D, i8> for Assembler<'a> {
    fn add(&mut self, dst: R9D, src: i8) {
        gen_r32_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R9D, i32> for Assembler<'a> {
    fn add(&mut self, dst: R9D, src: i32) {
        gen_r32_i32_add(self, dst, src);
    }
}

impl<'a> ADD<RDI, i8> for Assembler<'a> {
    fn add(&mut self, dst: RDI, src: i8) {
        gen_r64_i8_add(self, dst, src);
    }
}

impl<'a> ADD<RDI, i32> for Assembler<'a> {
    fn add(&mut self, dst: RDI, src: i32) {
        gen_r64_i32_add(self, dst, src);
    }
}

impl<'a> ADD<R14D, i8> for Assembler<'a> {
    fn add(&mut self, dst: R14D, src: i8) {
        gen_r32_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R14D, i32> for Assembler<'a> {
    fn add(&mut self, dst: R14D, src: i32) {
        gen_r32_i32_add(self, dst, src);
    }
}

impl<'a> ADD<R12D, i8> for Assembler<'a> {
    fn add(&mut self, dst: R12D, src: i8) {
        gen_r32_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R12D, i32> for Assembler<'a> {
    fn add(&mut self, dst: R12D, src: i32) {
        gen_r32_i32_add(self, dst, src);
    }
}

impl<'a> ADD<RCX, i8> for Assembler<'a> {
    fn add(&mut self, dst: RCX, src: i8) {
        gen_r64_i8_add(self, dst, src);
    }
}

impl<'a> ADD<RCX, i32> for Assembler<'a> {
    fn add(&mut self, dst: RCX, src: i32) {
        gen_r64_i32_add(self, dst, src);
    }
}

impl<'a> ADD<RAX, i8> for Assembler<'a> {
    fn add(&mut self, dst: RAX, src: i8) {
        gen_r64_i8_add(self, dst, src);
    }
}

impl<'a> ADD<RAX, i32> for Assembler<'a> {
    fn add(&mut self, dst: RAX, src: i32) {
        gen_r64_i32_add(self, dst, src);
    }
}

impl<'a> ADD<EDI, i8> for Assembler<'a> {
    fn add(&mut self, dst: EDI, src: i8) {
        gen_r32_i8_add(self, dst, src);
    }
}

impl<'a> ADD<EDI, i32> for Assembler<'a> {
    fn add(&mut self, dst: EDI, src: i32) {
        gen_r32_i32_add(self, dst, src);
    }
}

impl<'a> ADD<EDX, i8> for Assembler<'a> {
    fn add(&mut self, dst: EDX, src: i8) {
        gen_r32_i8_add(self, dst, src);
    }
}

impl<'a> ADD<EDX, i32> for Assembler<'a> {
    fn add(&mut self, dst: EDX, src: i32) {
        gen_r32_i32_add(self, dst, src);
    }
}

impl<'a> ADD<R13, i8> for Assembler<'a> {
    fn add(&mut self, dst: R13, src: i8) {
        gen_r64_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R13, i32> for Assembler<'a> {
    fn add(&mut self, dst: R13, src: i32) {
        gen_r64_i32_add(self, dst, src);
    }
}

impl<'a> ADD<R11, i8> for Assembler<'a> {
    fn add(&mut self, dst: R11, src: i8) {
        gen_r64_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R11, i32> for Assembler<'a> {
    fn add(&mut self, dst: R11, src: i32) {
        gen_r64_i32_add(self, dst, src);
    }
}

impl<'a> ADD<R8, i8> for Assembler<'a> {
    fn add(&mut self, dst: R8, src: i8) {
        gen_r64_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R8, i32> for Assembler<'a> {
    fn add(&mut self, dst: R8, src: i32) {
        gen_r64_i32_add(self, dst, src);
    }
}

impl<'a> ADD<RSP, i8> for Assembler<'a> {
    fn add(&mut self, dst: RSP, src: i8) {
        gen_r64_i8_add(self, dst, src);
    }
}

impl<'a> ADD<RSP, i32> for Assembler<'a> {
    fn add(&mut self, dst: RSP, src: i32) {
        gen_r64_i32_add(self, dst, src);
    }
}

impl<'a> ADD<R10D, i8> for Assembler<'a> {
    fn add(&mut self, dst: R10D, src: i8) {
        gen_r32_i8_add(self, dst, src);
    }
}

impl<'a> ADD<R10D, i32> for Assembler<'a> {
    fn add(&mut self, dst: R10D, src: i32) {
        gen_r32_i32_add(self, dst, src);
    }
}

impl<'a> ADD<ESP, i8> for Assembler<'a> {
    fn add(&mut self, dst: ESP, src: i8) {
        gen_r32_i8_add(self, dst, src);
    }
}

impl<'a> ADD<ESP, i32> for Assembler<'a> {
    fn add(&mut self, dst: ESP, src: i32) {
        gen_r32_i32_add(self, dst, src);
    }
}

impl<'a> OR<CL, i8> for Assembler<'a> {
    fn or(&mut self, dst: CL, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<AH, i8> for Assembler<'a> {
    fn or(&mut self, dst: AH, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<R13B, i8> for Assembler<'a> {
    fn or(&mut self, dst: R13B, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<R15B, i8> for Assembler<'a> {
    fn or(&mut self, dst: R15B, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<BH, i8> for Assembler<'a> {
    fn or(&mut self, dst: BH, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<DIL, i8> for Assembler<'a> {
    fn or(&mut self, dst: DIL, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<R12B, i8> for Assembler<'a> {
    fn or(&mut self, dst: R12B, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<SIL, i8> for Assembler<'a> {
    fn or(&mut self, dst: SIL, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<R14B, i8> for Assembler<'a> {
    fn or(&mut self, dst: R14B, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<R10B, i8> for Assembler<'a> {
    fn or(&mut self, dst: R10B, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<R8B, i8> for Assembler<'a> {
    fn or(&mut self, dst: R8B, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<BL, i8> for Assembler<'a> {
    fn or(&mut self, dst: BL, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<SPL, i8> for Assembler<'a> {
    fn or(&mut self, dst: SPL, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<CH, i8> for Assembler<'a> {
    fn or(&mut self, dst: CH, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<DH, i8> for Assembler<'a> {
    fn or(&mut self, dst: DH, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<R9B, i8> for Assembler<'a> {
    fn or(&mut self, dst: R9B, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<DL, i8> for Assembler<'a> {
    fn or(&mut self, dst: DL, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<BPL, i8> for Assembler<'a> {
    fn or(&mut self, dst: BPL, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<R11B, i8> for Assembler<'a> {
    fn or(&mut self, dst: R11B, src: i8) {
        gen_r8_i8_or(self, dst, src);
    }
}

impl<'a> OR<BX, i8> for Assembler<'a> {
    fn or(&mut self, dst: BX, src: i8) {
        gen_r16_i8_or(self, dst, src);
    }
}

impl<'a> OR<BX, i16> for Assembler<'a> {
    fn or(&mut self, dst: BX, src: i16) {
        gen_r16_i16_or(self, dst, src);
    }
}

impl<'a> OR<AX, i8> for Assembler<'a> {
    fn or(&mut self, dst: AX, src: i8) {
        gen_r16_i8_or(self, dst, src);
    }
}

impl<'a> OR<AX, i16> for Assembler<'a> {
    fn or(&mut self, dst: AX, src: i16) {
        gen_r16_i16_or(self, dst, src);
    }
}

impl<'a> OR<DX, i8> for Assembler<'a> {
    fn or(&mut self, dst: DX, src: i8) {
        gen_r16_i8_or(self, dst, src);
    }
}

impl<'a> OR<DX, i16> for Assembler<'a> {
    fn or(&mut self, dst: DX, src: i16) {
        gen_r16_i16_or(self, dst, src);
    }
}

impl<'a> OR<R8W, i8> for Assembler<'a> {
    fn or(&mut self, dst: R8W, src: i8) {
        gen_r16_i8_or(self, dst, src);
    }
}

impl<'a> OR<R8W, i16> for Assembler<'a> {
    fn or(&mut self, dst: R8W, src: i16) {
        gen_r16_i16_or(self, dst, src);
    }
}

impl<'a> OR<R11W, i8> for Assembler<'a> {
    fn or(&mut self, dst: R11W, src: i8) {
        gen_r16_i8_or(self, dst, src);
    }
}

impl<'a> OR<R11W, i16> for Assembler<'a> {
    fn or(&mut self, dst: R11W, src: i16) {
        gen_r16_i16_or(self, dst, src);
    }
}

impl<'a> OR<SP, i8> for Assembler<'a> {
    fn or(&mut self, dst: SP, src: i8) {
        gen_r16_i8_or(self, dst, src);
    }
}

impl<'a> OR<SP, i16> for Assembler<'a> {
    fn or(&mut self, dst: SP, src: i16) {
        gen_r16_i16_or(self, dst, src);
    }
}

impl<'a> OR<CX, i8> for Assembler<'a> {
    fn or(&mut self, dst: CX, src: i8) {
        gen_r16_i8_or(self, dst, src);
    }
}

impl<'a> OR<CX, i16> for Assembler<'a> {
    fn or(&mut self, dst: CX, src: i16) {
        gen_r16_i16_or(self, dst, src);
    }
}

impl<'a> OR<R12W, i8> for Assembler<'a> {
    fn or(&mut self, dst: R12W, src: i8) {
        gen_r16_i8_or(self, dst, src);
    }
}

impl<'a> OR<R12W, i16> for Assembler<'a> {
    fn or(&mut self, dst: R12W, src: i16) {
        gen_r16_i16_or(self, dst, src);
    }
}

impl<'a> OR<R14W, i8> for Assembler<'a> {
    fn or(&mut self, dst: R14W, src: i8) {
        gen_r16_i8_or(self, dst, src);
    }
}

impl<'a> OR<R14W, i16> for Assembler<'a> {
    fn or(&mut self, dst: R14W, src: i16) {
        gen_r16_i16_or(self, dst, src);
    }
}

impl<'a> OR<R10W, i8> for Assembler<'a> {
    fn or(&mut self, dst: R10W, src: i8) {
        gen_r16_i8_or(self, dst, src);
    }
}

impl<'a> OR<R10W, i16> for Assembler<'a> {
    fn or(&mut self, dst: R10W, src: i16) {
        gen_r16_i16_or(self, dst, src);
    }
}

impl<'a> OR<R13W, i8> for Assembler<'a> {
    fn or(&mut self, dst: R13W, src: i8) {
        gen_r16_i8_or(self, dst, src);
    }
}

impl<'a> OR<R13W, i16> for Assembler<'a> {
    fn or(&mut self, dst: R13W, src: i16) {
        gen_r16_i16_or(self, dst, src);
    }
}

impl<'a> OR<BP, i8> for Assembler<'a> {
    fn or(&mut self, dst: BP, src: i8) {
        gen_r16_i8_or(self, dst, src);
    }
}

impl<'a> OR<BP, i16> for Assembler<'a> {
    fn or(&mut self, dst: BP, src: i16) {
        gen_r16_i16_or(self, dst, src);
    }
}

impl<'a> OR<DI, i8> for Assembler<'a> {
    fn or(&mut self, dst: DI, src: i8) {
        gen_r16_i8_or(self, dst, src);
    }
}

impl<'a> OR<DI, i16> for Assembler<'a> {
    fn or(&mut self, dst: DI, src: i16) {
        gen_r16_i16_or(self, dst, src);
    }
}

impl<'a> OR<R9W, i8> for Assembler<'a> {
    fn or(&mut self, dst: R9W, src: i8) {
        gen_r16_i8_or(self, dst, src);
    }
}

impl<'a> OR<R9W, i16> for Assembler<'a> {
    fn or(&mut self, dst: R9W, src: i16) {
        gen_r16_i16_or(self, dst, src);
    }
}

impl<'a> OR<R15W, i8> for Assembler<'a> {
    fn or(&mut self, dst: R15W, src: i8) {
        gen_r16_i8_or(self, dst, src);
    }
}

impl<'a> OR<R15W, i16> for Assembler<'a> {
    fn or(&mut self, dst: R15W, src: i16) {
        gen_r16_i16_or(self, dst, src);
    }
}

impl<'a> OR<SI, i8> for Assembler<'a> {
    fn or(&mut self, dst: SI, src: i8) {
        gen_r16_i8_or(self, dst, src);
    }
}

impl<'a> OR<SI, i16> for Assembler<'a> {
    fn or(&mut self, dst: SI, src: i16) {
        gen_r16_i16_or(self, dst, src);
    }
}

impl<'a> OR<R8D, i8> for Assembler<'a> {
    fn or(&mut self, dst: R8D, src: i8) {
        gen_r32_i8_or(self, dst, src);
    }
}

impl<'a> OR<R8D, i32> for Assembler<'a> {
    fn or(&mut self, dst: R8D, src: i32) {
        gen_r32_i32_or(self, dst, src);
    }
}

impl<'a> OR<ECX, i8> for Assembler<'a> {
    fn or(&mut self, dst: ECX, src: i8) {
        gen_r32_i8_or(self, dst, src);
    }
}

impl<'a> OR<ECX, i32> for Assembler<'a> {
    fn or(&mut self, dst: ECX, src: i32) {
        gen_r32_i32_or(self, dst, src);
    }
}

impl<'a> OR<ESI, i8> for Assembler<'a> {
    fn or(&mut self, dst: ESI, src: i8) {
        gen_r32_i8_or(self, dst, src);
    }
}

impl<'a> OR<ESI, i32> for Assembler<'a> {
    fn or(&mut self, dst: ESI, src: i32) {
        gen_r32_i32_or(self, dst, src);
    }
}

impl<'a> OR<EAX, i8> for Assembler<'a> {
    fn or(&mut self, dst: EAX, src: i8) {
        gen_r32_i8_or(self, dst, src);
    }
}

impl<'a> OR<EAX, i32> for Assembler<'a> {
    fn or(&mut self, dst: EAX, src: i32) {
        gen_r32_i32_or(self, dst, src);
    }
}

impl<'a> OR<EBX, i8> for Assembler<'a> {
    fn or(&mut self, dst: EBX, src: i8) {
        gen_r32_i8_or(self, dst, src);
    }
}

impl<'a> OR<EBX, i32> for Assembler<'a> {
    fn or(&mut self, dst: EBX, src: i32) {
        gen_r32_i32_or(self, dst, src);
    }
}

impl<'a> OR<RSI, i8> for Assembler<'a> {
    fn or(&mut self, dst: RSI, src: i8) {
        gen_r64_i8_or(self, dst, src);
    }
}

impl<'a> OR<RSI, i32> for Assembler<'a> {
    fn or(&mut self, dst: RSI, src: i32) {
        gen_r64_i32_or(self, dst, src);
    }
}

impl<'a> OR<RBX, i8> for Assembler<'a> {
    fn or(&mut self, dst: RBX, src: i8) {
        gen_r64_i8_or(self, dst, src);
    }
}

impl<'a> OR<RBX, i32> for Assembler<'a> {
    fn or(&mut self, dst: RBX, src: i32) {
        gen_r64_i32_or(self, dst, src);
    }
}

impl<'a> OR<EBP, i8> for Assembler<'a> {
    fn or(&mut self, dst: EBP, src: i8) {
        gen_r32_i8_or(self, dst, src);
    }
}

impl<'a> OR<EBP, i32> for Assembler<'a> {
    fn or(&mut self, dst: EBP, src: i32) {
        gen_r32_i32_or(self, dst, src);
    }
}

impl<'a> OR<R14, i8> for Assembler<'a> {
    fn or(&mut self, dst: R14, src: i8) {
        gen_r64_i8_or(self, dst, src);
    }
}

impl<'a> OR<R14, i32> for Assembler<'a> {
    fn or(&mut self, dst: R14, src: i32) {
        gen_r64_i32_or(self, dst, src);
    }
}

impl<'a> OR<R10, i8> for Assembler<'a> {
    fn or(&mut self, dst: R10, src: i8) {
        gen_r64_i8_or(self, dst, src);
    }
}

impl<'a> OR<R10, i32> for Assembler<'a> {
    fn or(&mut self, dst: R10, src: i32) {
        gen_r64_i32_or(self, dst, src);
    }
}

impl<'a> OR<R9, i8> for Assembler<'a> {
    fn or(&mut self, dst: R9, src: i8) {
        gen_r64_i8_or(self, dst, src);
    }
}

impl<'a> OR<R9, i32> for Assembler<'a> {
    fn or(&mut self, dst: R9, src: i32) {
        gen_r64_i32_or(self, dst, src);
    }
}

impl<'a> OR<RBP, i8> for Assembler<'a> {
    fn or(&mut self, dst: RBP, src: i8) {
        gen_r64_i8_or(self, dst, src);
    }
}

impl<'a> OR<RBP, i32> for Assembler<'a> {
    fn or(&mut self, dst: RBP, src: i32) {
        gen_r64_i32_or(self, dst, src);
    }
}

impl<'a> OR<R15, i8> for Assembler<'a> {
    fn or(&mut self, dst: R15, src: i8) {
        gen_r64_i8_or(self, dst, src);
    }
}

impl<'a> OR<R15, i32> for Assembler<'a> {
    fn or(&mut self, dst: R15, src: i32) {
        gen_r64_i32_or(self, dst, src);
    }
}

impl<'a> OR<R12, i8> for Assembler<'a> {
    fn or(&mut self, dst: R12, src: i8) {
        gen_r64_i8_or(self, dst, src);
    }
}

impl<'a> OR<R12, i32> for Assembler<'a> {
    fn or(&mut self, dst: R12, src: i32) {
        gen_r64_i32_or(self, dst, src);
    }
}

impl<'a> OR<R11D, i8> for Assembler<'a> {
    fn or(&mut self, dst: R11D, src: i8) {
        gen_r32_i8_or(self, dst, src);
    }
}

impl<'a> OR<R11D, i32> for Assembler<'a> {
    fn or(&mut self, dst: R11D, src: i32) {
        gen_r32_i32_or(self, dst, src);
    }
}

impl<'a> OR<RDX, i8> for Assembler<'a> {
    fn or(&mut self, dst: RDX, src: i8) {
        gen_r64_i8_or(self, dst, src);
    }
}

impl<'a> OR<RDX, i32> for Assembler<'a> {
    fn or(&mut self, dst: RDX, src: i32) {
        gen_r64_i32_or(self, dst, src);
    }
}

impl<'a> OR<R15D, i8> for Assembler<'a> {
    fn or(&mut self, dst: R15D, src: i8) {
        gen_r32_i8_or(self, dst, src);
    }
}

impl<'a> OR<R15D, i32> for Assembler<'a> {
    fn or(&mut self, dst: R15D, src: i32) {
        gen_r32_i32_or(self, dst, src);
    }
}

impl<'a> OR<R9D, i8> for Assembler<'a> {
    fn or(&mut self, dst: R9D, src: i8) {
        gen_r32_i8_or(self, dst, src);
    }
}

impl<'a> OR<R9D, i32> for Assembler<'a> {
    fn or(&mut self, dst: R9D, src: i32) {
        gen_r32_i32_or(self, dst, src);
    }
}

impl<'a> OR<RDI, i8> for Assembler<'a> {
    fn or(&mut self, dst: RDI, src: i8) {
        gen_r64_i8_or(self, dst, src);
    }
}

impl<'a> OR<RDI, i32> for Assembler<'a> {
    fn or(&mut self, dst: RDI, src: i32) {
        gen_r64_i32_or(self, dst, src);
    }
}

impl<'a> OR<R14D, i8> for Assembler<'a> {
    fn or(&mut self, dst: R14D, src: i8) {
        gen_r32_i8_or(self, dst, src);
    }
}

impl<'a> OR<R14D, i32> for Assembler<'a> {
    fn or(&mut self, dst: R14D, src: i32) {
        gen_r32_i32_or(self, dst, src);
    }
}

impl<'a> OR<R12D, i8> for Assembler<'a> {
    fn or(&mut self, dst: R12D, src: i8) {
        gen_r32_i8_or(self, dst, src);
    }
}

impl<'a> OR<R12D, i32> for Assembler<'a> {
    fn or(&mut self, dst: R12D, src: i32) {
        gen_r32_i32_or(self, dst, src);
    }
}

impl<'a> OR<RCX, i8> for Assembler<'a> {
    fn or(&mut self, dst: RCX, src: i8) {
        gen_r64_i8_or(self, dst, src);
    }
}

impl<'a> OR<RCX, i32> for Assembler<'a> {
    fn or(&mut self, dst: RCX, src: i32) {
        gen_r64_i32_or(self, dst, src);
    }
}

impl<'a> OR<RAX, i8> for Assembler<'a> {
    fn or(&mut self, dst: RAX, src: i8) {
        gen_r64_i8_or(self, dst, src);
    }
}

impl<'a> OR<RAX, i32> for Assembler<'a> {
    fn or(&mut self, dst: RAX, src: i32) {
        gen_r64_i32_or(self, dst, src);
    }
}

impl<'a> OR<EDI, i8> for Assembler<'a> {
    fn or(&mut self, dst: EDI, src: i8) {
        gen_r32_i8_or(self, dst, src);
    }
}

impl<'a> OR<EDI, i32> for Assembler<'a> {
    fn or(&mut self, dst: EDI, src: i32) {
        gen_r32_i32_or(self, dst, src);
    }
}

impl<'a> OR<EDX, i8> for Assembler<'a> {
    fn or(&mut self, dst: EDX, src: i8) {
        gen_r32_i8_or(self, dst, src);
    }
}

impl<'a> OR<EDX, i32> for Assembler<'a> {
    fn or(&mut self, dst: EDX, src: i32) {
        gen_r32_i32_or(self, dst, src);
    }
}

impl<'a> OR<R13, i8> for Assembler<'a> {
    fn or(&mut self, dst: R13, src: i8) {
        gen_r64_i8_or(self, dst, src);
    }
}

impl<'a> OR<R13, i32> for Assembler<'a> {
    fn or(&mut self, dst: R13, src: i32) {
        gen_r64_i32_or(self, dst, src);
    }
}

impl<'a> OR<R11, i8> for Assembler<'a> {
    fn or(&mut self, dst: R11, src: i8) {
        gen_r64_i8_or(self, dst, src);
    }
}

impl<'a> OR<R11, i32> for Assembler<'a> {
    fn or(&mut self, dst: R11, src: i32) {
        gen_r64_i32_or(self, dst, src);
    }
}

impl<'a> OR<R8, i8> for Assembler<'a> {
    fn or(&mut self, dst: R8, src: i8) {
        gen_r64_i8_or(self, dst, src);
    }
}

impl<'a> OR<R8, i32> for Assembler<'a> {
    fn or(&mut self, dst: R8, src: i32) {
        gen_r64_i32_or(self, dst, src);
    }
}

impl<'a> OR<RSP, i8> for Assembler<'a> {
    fn or(&mut self, dst: RSP, src: i8) {
        gen_r64_i8_or(self, dst, src);
    }
}

impl<'a> OR<RSP, i32> for Assembler<'a> {
    fn or(&mut self, dst: RSP, src: i32) {
        gen_r64_i32_or(self, dst, src);
    }
}

impl<'a> OR<R10D, i8> for Assembler<'a> {
    fn or(&mut self, dst: R10D, src: i8) {
        gen_r32_i8_or(self, dst, src);
    }
}

impl<'a> OR<R10D, i32> for Assembler<'a> {
    fn or(&mut self, dst: R10D, src: i32) {
        gen_r32_i32_or(self, dst, src);
    }
}

impl<'a> OR<ESP, i8> for Assembler<'a> {
    fn or(&mut self, dst: ESP, src: i8) {
        gen_r32_i8_or(self, dst, src);
    }
}

impl<'a> OR<ESP, i32> for Assembler<'a> {
    fn or(&mut self, dst: ESP, src: i32) {
        gen_r32_i32_or(self, dst, src);
    }
}

impl<'a> ADC<CL, i8> for Assembler<'a> {
    fn adc(&mut self, dst: CL, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<AH, i8> for Assembler<'a> {
    fn adc(&mut self, dst: AH, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R13B, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R13B, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R15B, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R15B, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<BH, i8> for Assembler<'a> {
    fn adc(&mut self, dst: BH, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<DIL, i8> for Assembler<'a> {
    fn adc(&mut self, dst: DIL, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R12B, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R12B, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<SIL, i8> for Assembler<'a> {
    fn adc(&mut self, dst: SIL, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R14B, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R14B, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R10B, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R10B, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R8B, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R8B, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<BL, i8> for Assembler<'a> {
    fn adc(&mut self, dst: BL, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<SPL, i8> for Assembler<'a> {
    fn adc(&mut self, dst: SPL, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<CH, i8> for Assembler<'a> {
    fn adc(&mut self, dst: CH, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<DH, i8> for Assembler<'a> {
    fn adc(&mut self, dst: DH, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R9B, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R9B, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<DL, i8> for Assembler<'a> {
    fn adc(&mut self, dst: DL, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<BPL, i8> for Assembler<'a> {
    fn adc(&mut self, dst: BPL, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R11B, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R11B, src: i8) {
        gen_r8_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<BX, i8> for Assembler<'a> {
    fn adc(&mut self, dst: BX, src: i8) {
        gen_r16_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<BX, i16> for Assembler<'a> {
    fn adc(&mut self, dst: BX, src: i16) {
        gen_r16_i16_adc(self, dst, src);
    }
}

impl<'a> ADC<AX, i8> for Assembler<'a> {
    fn adc(&mut self, dst: AX, src: i8) {
        gen_r16_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<AX, i16> for Assembler<'a> {
    fn adc(&mut self, dst: AX, src: i16) {
        gen_r16_i16_adc(self, dst, src);
    }
}

impl<'a> ADC<DX, i8> for Assembler<'a> {
    fn adc(&mut self, dst: DX, src: i8) {
        gen_r16_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<DX, i16> for Assembler<'a> {
    fn adc(&mut self, dst: DX, src: i16) {
        gen_r16_i16_adc(self, dst, src);
    }
}

impl<'a> ADC<R8W, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R8W, src: i8) {
        gen_r16_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R8W, i16> for Assembler<'a> {
    fn adc(&mut self, dst: R8W, src: i16) {
        gen_r16_i16_adc(self, dst, src);
    }
}

impl<'a> ADC<R11W, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R11W, src: i8) {
        gen_r16_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R11W, i16> for Assembler<'a> {
    fn adc(&mut self, dst: R11W, src: i16) {
        gen_r16_i16_adc(self, dst, src);
    }
}

impl<'a> ADC<SP, i8> for Assembler<'a> {
    fn adc(&mut self, dst: SP, src: i8) {
        gen_r16_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<SP, i16> for Assembler<'a> {
    fn adc(&mut self, dst: SP, src: i16) {
        gen_r16_i16_adc(self, dst, src);
    }
}

impl<'a> ADC<CX, i8> for Assembler<'a> {
    fn adc(&mut self, dst: CX, src: i8) {
        gen_r16_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<CX, i16> for Assembler<'a> {
    fn adc(&mut self, dst: CX, src: i16) {
        gen_r16_i16_adc(self, dst, src);
    }
}

impl<'a> ADC<R12W, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R12W, src: i8) {
        gen_r16_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R12W, i16> for Assembler<'a> {
    fn adc(&mut self, dst: R12W, src: i16) {
        gen_r16_i16_adc(self, dst, src);
    }
}

impl<'a> ADC<R14W, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R14W, src: i8) {
        gen_r16_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R14W, i16> for Assembler<'a> {
    fn adc(&mut self, dst: R14W, src: i16) {
        gen_r16_i16_adc(self, dst, src);
    }
}

impl<'a> ADC<R10W, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R10W, src: i8) {
        gen_r16_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R10W, i16> for Assembler<'a> {
    fn adc(&mut self, dst: R10W, src: i16) {
        gen_r16_i16_adc(self, dst, src);
    }
}

impl<'a> ADC<R13W, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R13W, src: i8) {
        gen_r16_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R13W, i16> for Assembler<'a> {
    fn adc(&mut self, dst: R13W, src: i16) {
        gen_r16_i16_adc(self, dst, src);
    }
}

impl<'a> ADC<BP, i8> for Assembler<'a> {
    fn adc(&mut self, dst: BP, src: i8) {
        gen_r16_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<BP, i16> for Assembler<'a> {
    fn adc(&mut self, dst: BP, src: i16) {
        gen_r16_i16_adc(self, dst, src);
    }
}

impl<'a> ADC<DI, i8> for Assembler<'a> {
    fn adc(&mut self, dst: DI, src: i8) {
        gen_r16_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<DI, i16> for Assembler<'a> {
    fn adc(&mut self, dst: DI, src: i16) {
        gen_r16_i16_adc(self, dst, src);
    }
}

impl<'a> ADC<R9W, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R9W, src: i8) {
        gen_r16_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R9W, i16> for Assembler<'a> {
    fn adc(&mut self, dst: R9W, src: i16) {
        gen_r16_i16_adc(self, dst, src);
    }
}

impl<'a> ADC<R15W, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R15W, src: i8) {
        gen_r16_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R15W, i16> for Assembler<'a> {
    fn adc(&mut self, dst: R15W, src: i16) {
        gen_r16_i16_adc(self, dst, src);
    }
}

impl<'a> ADC<SI, i8> for Assembler<'a> {
    fn adc(&mut self, dst: SI, src: i8) {
        gen_r16_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<SI, i16> for Assembler<'a> {
    fn adc(&mut self, dst: SI, src: i16) {
        gen_r16_i16_adc(self, dst, src);
    }
}

impl<'a> ADC<R8D, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R8D, src: i8) {
        gen_r32_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R8D, i32> for Assembler<'a> {
    fn adc(&mut self, dst: R8D, src: i32) {
        gen_r32_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<ECX, i8> for Assembler<'a> {
    fn adc(&mut self, dst: ECX, src: i8) {
        gen_r32_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<ECX, i32> for Assembler<'a> {
    fn adc(&mut self, dst: ECX, src: i32) {
        gen_r32_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<ESI, i8> for Assembler<'a> {
    fn adc(&mut self, dst: ESI, src: i8) {
        gen_r32_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<ESI, i32> for Assembler<'a> {
    fn adc(&mut self, dst: ESI, src: i32) {
        gen_r32_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<EAX, i8> for Assembler<'a> {
    fn adc(&mut self, dst: EAX, src: i8) {
        gen_r32_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<EAX, i32> for Assembler<'a> {
    fn adc(&mut self, dst: EAX, src: i32) {
        gen_r32_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<EBX, i8> for Assembler<'a> {
    fn adc(&mut self, dst: EBX, src: i8) {
        gen_r32_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<EBX, i32> for Assembler<'a> {
    fn adc(&mut self, dst: EBX, src: i32) {
        gen_r32_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<RSI, i8> for Assembler<'a> {
    fn adc(&mut self, dst: RSI, src: i8) {
        gen_r64_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<RSI, i32> for Assembler<'a> {
    fn adc(&mut self, dst: RSI, src: i32) {
        gen_r64_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<RBX, i8> for Assembler<'a> {
    fn adc(&mut self, dst: RBX, src: i8) {
        gen_r64_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<RBX, i32> for Assembler<'a> {
    fn adc(&mut self, dst: RBX, src: i32) {
        gen_r64_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<EBP, i8> for Assembler<'a> {
    fn adc(&mut self, dst: EBP, src: i8) {
        gen_r32_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<EBP, i32> for Assembler<'a> {
    fn adc(&mut self, dst: EBP, src: i32) {
        gen_r32_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<R14, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R14, src: i8) {
        gen_r64_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R14, i32> for Assembler<'a> {
    fn adc(&mut self, dst: R14, src: i32) {
        gen_r64_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<R10, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R10, src: i8) {
        gen_r64_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R10, i32> for Assembler<'a> {
    fn adc(&mut self, dst: R10, src: i32) {
        gen_r64_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<R9, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R9, src: i8) {
        gen_r64_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R9, i32> for Assembler<'a> {
    fn adc(&mut self, dst: R9, src: i32) {
        gen_r64_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<RBP, i8> for Assembler<'a> {
    fn adc(&mut self, dst: RBP, src: i8) {
        gen_r64_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<RBP, i32> for Assembler<'a> {
    fn adc(&mut self, dst: RBP, src: i32) {
        gen_r64_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<R15, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R15, src: i8) {
        gen_r64_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R15, i32> for Assembler<'a> {
    fn adc(&mut self, dst: R15, src: i32) {
        gen_r64_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<R12, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R12, src: i8) {
        gen_r64_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R12, i32> for Assembler<'a> {
    fn adc(&mut self, dst: R12, src: i32) {
        gen_r64_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<R11D, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R11D, src: i8) {
        gen_r32_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R11D, i32> for Assembler<'a> {
    fn adc(&mut self, dst: R11D, src: i32) {
        gen_r32_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<RDX, i8> for Assembler<'a> {
    fn adc(&mut self, dst: RDX, src: i8) {
        gen_r64_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<RDX, i32> for Assembler<'a> {
    fn adc(&mut self, dst: RDX, src: i32) {
        gen_r64_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<R15D, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R15D, src: i8) {
        gen_r32_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R15D, i32> for Assembler<'a> {
    fn adc(&mut self, dst: R15D, src: i32) {
        gen_r32_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<R9D, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R9D, src: i8) {
        gen_r32_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R9D, i32> for Assembler<'a> {
    fn adc(&mut self, dst: R9D, src: i32) {
        gen_r32_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<RDI, i8> for Assembler<'a> {
    fn adc(&mut self, dst: RDI, src: i8) {
        gen_r64_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<RDI, i32> for Assembler<'a> {
    fn adc(&mut self, dst: RDI, src: i32) {
        gen_r64_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<R14D, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R14D, src: i8) {
        gen_r32_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R14D, i32> for Assembler<'a> {
    fn adc(&mut self, dst: R14D, src: i32) {
        gen_r32_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<R12D, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R12D, src: i8) {
        gen_r32_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R12D, i32> for Assembler<'a> {
    fn adc(&mut self, dst: R12D, src: i32) {
        gen_r32_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<RCX, i8> for Assembler<'a> {
    fn adc(&mut self, dst: RCX, src: i8) {
        gen_r64_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<RCX, i32> for Assembler<'a> {
    fn adc(&mut self, dst: RCX, src: i32) {
        gen_r64_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<RAX, i8> for Assembler<'a> {
    fn adc(&mut self, dst: RAX, src: i8) {
        gen_r64_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<RAX, i32> for Assembler<'a> {
    fn adc(&mut self, dst: RAX, src: i32) {
        gen_r64_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<EDI, i8> for Assembler<'a> {
    fn adc(&mut self, dst: EDI, src: i8) {
        gen_r32_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<EDI, i32> for Assembler<'a> {
    fn adc(&mut self, dst: EDI, src: i32) {
        gen_r32_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<EDX, i8> for Assembler<'a> {
    fn adc(&mut self, dst: EDX, src: i8) {
        gen_r32_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<EDX, i32> for Assembler<'a> {
    fn adc(&mut self, dst: EDX, src: i32) {
        gen_r32_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<R13, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R13, src: i8) {
        gen_r64_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R13, i32> for Assembler<'a> {
    fn adc(&mut self, dst: R13, src: i32) {
        gen_r64_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<R11, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R11, src: i8) {
        gen_r64_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R11, i32> for Assembler<'a> {
    fn adc(&mut self, dst: R11, src: i32) {
        gen_r64_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<R8, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R8, src: i8) {
        gen_r64_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R8, i32> for Assembler<'a> {
    fn adc(&mut self, dst: R8, src: i32) {
        gen_r64_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<RSP, i8> for Assembler<'a> {
    fn adc(&mut self, dst: RSP, src: i8) {
        gen_r64_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<RSP, i32> for Assembler<'a> {
    fn adc(&mut self, dst: RSP, src: i32) {
        gen_r64_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<R10D, i8> for Assembler<'a> {
    fn adc(&mut self, dst: R10D, src: i8) {
        gen_r32_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<R10D, i32> for Assembler<'a> {
    fn adc(&mut self, dst: R10D, src: i32) {
        gen_r32_i32_adc(self, dst, src);
    }
}

impl<'a> ADC<ESP, i8> for Assembler<'a> {
    fn adc(&mut self, dst: ESP, src: i8) {
        gen_r32_i8_adc(self, dst, src);
    }
}

impl<'a> ADC<ESP, i32> for Assembler<'a> {
    fn adc(&mut self, dst: ESP, src: i32) {
        gen_r32_i32_adc(self, dst, src);
    }
}

impl<'a> SBB<CL, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: CL, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<AH, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: AH, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R13B, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R13B, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R15B, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R15B, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<BH, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: BH, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<DIL, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: DIL, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R12B, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R12B, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<SIL, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: SIL, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R14B, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R14B, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R10B, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R10B, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R8B, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R8B, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<BL, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: BL, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<SPL, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: SPL, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<CH, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: CH, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<DH, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: DH, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R9B, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R9B, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<DL, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: DL, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<BPL, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: BPL, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R11B, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R11B, src: i8) {
        gen_r8_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<BX, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: BX, src: i8) {
        gen_r16_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<BX, i16> for Assembler<'a> {
    fn sbb(&mut self, dst: BX, src: i16) {
        gen_r16_i16_sbb(self, dst, src);
    }
}

impl<'a> SBB<AX, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: AX, src: i8) {
        gen_r16_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<AX, i16> for Assembler<'a> {
    fn sbb(&mut self, dst: AX, src: i16) {
        gen_r16_i16_sbb(self, dst, src);
    }
}

impl<'a> SBB<DX, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: DX, src: i8) {
        gen_r16_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<DX, i16> for Assembler<'a> {
    fn sbb(&mut self, dst: DX, src: i16) {
        gen_r16_i16_sbb(self, dst, src);
    }
}

impl<'a> SBB<R8W, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R8W, src: i8) {
        gen_r16_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R8W, i16> for Assembler<'a> {
    fn sbb(&mut self, dst: R8W, src: i16) {
        gen_r16_i16_sbb(self, dst, src);
    }
}

impl<'a> SBB<R11W, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R11W, src: i8) {
        gen_r16_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R11W, i16> for Assembler<'a> {
    fn sbb(&mut self, dst: R11W, src: i16) {
        gen_r16_i16_sbb(self, dst, src);
    }
}

impl<'a> SBB<SP, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: SP, src: i8) {
        gen_r16_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<SP, i16> for Assembler<'a> {
    fn sbb(&mut self, dst: SP, src: i16) {
        gen_r16_i16_sbb(self, dst, src);
    }
}

impl<'a> SBB<CX, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: CX, src: i8) {
        gen_r16_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<CX, i16> for Assembler<'a> {
    fn sbb(&mut self, dst: CX, src: i16) {
        gen_r16_i16_sbb(self, dst, src);
    }
}

impl<'a> SBB<R12W, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R12W, src: i8) {
        gen_r16_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R12W, i16> for Assembler<'a> {
    fn sbb(&mut self, dst: R12W, src: i16) {
        gen_r16_i16_sbb(self, dst, src);
    }
}

impl<'a> SBB<R14W, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R14W, src: i8) {
        gen_r16_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R14W, i16> for Assembler<'a> {
    fn sbb(&mut self, dst: R14W, src: i16) {
        gen_r16_i16_sbb(self, dst, src);
    }
}

impl<'a> SBB<R10W, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R10W, src: i8) {
        gen_r16_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R10W, i16> for Assembler<'a> {
    fn sbb(&mut self, dst: R10W, src: i16) {
        gen_r16_i16_sbb(self, dst, src);
    }
}

impl<'a> SBB<R13W, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R13W, src: i8) {
        gen_r16_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R13W, i16> for Assembler<'a> {
    fn sbb(&mut self, dst: R13W, src: i16) {
        gen_r16_i16_sbb(self, dst, src);
    }
}

impl<'a> SBB<BP, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: BP, src: i8) {
        gen_r16_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<BP, i16> for Assembler<'a> {
    fn sbb(&mut self, dst: BP, src: i16) {
        gen_r16_i16_sbb(self, dst, src);
    }
}

impl<'a> SBB<DI, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: DI, src: i8) {
        gen_r16_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<DI, i16> for Assembler<'a> {
    fn sbb(&mut self, dst: DI, src: i16) {
        gen_r16_i16_sbb(self, dst, src);
    }
}

impl<'a> SBB<R9W, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R9W, src: i8) {
        gen_r16_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R9W, i16> for Assembler<'a> {
    fn sbb(&mut self, dst: R9W, src: i16) {
        gen_r16_i16_sbb(self, dst, src);
    }
}

impl<'a> SBB<R15W, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R15W, src: i8) {
        gen_r16_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R15W, i16> for Assembler<'a> {
    fn sbb(&mut self, dst: R15W, src: i16) {
        gen_r16_i16_sbb(self, dst, src);
    }
}

impl<'a> SBB<SI, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: SI, src: i8) {
        gen_r16_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<SI, i16> for Assembler<'a> {
    fn sbb(&mut self, dst: SI, src: i16) {
        gen_r16_i16_sbb(self, dst, src);
    }
}

impl<'a> SBB<R8D, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R8D, src: i8) {
        gen_r32_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R8D, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: R8D, src: i32) {
        gen_r32_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<ECX, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: ECX, src: i8) {
        gen_r32_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<ECX, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: ECX, src: i32) {
        gen_r32_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<ESI, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: ESI, src: i8) {
        gen_r32_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<ESI, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: ESI, src: i32) {
        gen_r32_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<EAX, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: EAX, src: i8) {
        gen_r32_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<EAX, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: EAX, src: i32) {
        gen_r32_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<EBX, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: EBX, src: i8) {
        gen_r32_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<EBX, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: EBX, src: i32) {
        gen_r32_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<RSI, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: RSI, src: i8) {
        gen_r64_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<RSI, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: RSI, src: i32) {
        gen_r64_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<RBX, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: RBX, src: i8) {
        gen_r64_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<RBX, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: RBX, src: i32) {
        gen_r64_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<EBP, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: EBP, src: i8) {
        gen_r32_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<EBP, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: EBP, src: i32) {
        gen_r32_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<R14, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R14, src: i8) {
        gen_r64_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R14, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: R14, src: i32) {
        gen_r64_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<R10, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R10, src: i8) {
        gen_r64_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R10, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: R10, src: i32) {
        gen_r64_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<R9, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R9, src: i8) {
        gen_r64_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R9, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: R9, src: i32) {
        gen_r64_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<RBP, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: RBP, src: i8) {
        gen_r64_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<RBP, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: RBP, src: i32) {
        gen_r64_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<R15, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R15, src: i8) {
        gen_r64_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R15, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: R15, src: i32) {
        gen_r64_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<R12, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R12, src: i8) {
        gen_r64_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R12, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: R12, src: i32) {
        gen_r64_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<R11D, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R11D, src: i8) {
        gen_r32_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R11D, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: R11D, src: i32) {
        gen_r32_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<RDX, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: RDX, src: i8) {
        gen_r64_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<RDX, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: RDX, src: i32) {
        gen_r64_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<R15D, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R15D, src: i8) {
        gen_r32_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R15D, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: R15D, src: i32) {
        gen_r32_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<R9D, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R9D, src: i8) {
        gen_r32_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R9D, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: R9D, src: i32) {
        gen_r32_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<RDI, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: RDI, src: i8) {
        gen_r64_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<RDI, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: RDI, src: i32) {
        gen_r64_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<R14D, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R14D, src: i8) {
        gen_r32_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R14D, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: R14D, src: i32) {
        gen_r32_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<R12D, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R12D, src: i8) {
        gen_r32_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R12D, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: R12D, src: i32) {
        gen_r32_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<RCX, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: RCX, src: i8) {
        gen_r64_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<RCX, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: RCX, src: i32) {
        gen_r64_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<RAX, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: RAX, src: i8) {
        gen_r64_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<RAX, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: RAX, src: i32) {
        gen_r64_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<EDI, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: EDI, src: i8) {
        gen_r32_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<EDI, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: EDI, src: i32) {
        gen_r32_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<EDX, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: EDX, src: i8) {
        gen_r32_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<EDX, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: EDX, src: i32) {
        gen_r32_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<R13, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R13, src: i8) {
        gen_r64_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R13, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: R13, src: i32) {
        gen_r64_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<R11, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R11, src: i8) {
        gen_r64_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R11, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: R11, src: i32) {
        gen_r64_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<R8, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R8, src: i8) {
        gen_r64_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R8, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: R8, src: i32) {
        gen_r64_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<RSP, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: RSP, src: i8) {
        gen_r64_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<RSP, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: RSP, src: i32) {
        gen_r64_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<R10D, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: R10D, src: i8) {
        gen_r32_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<R10D, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: R10D, src: i32) {
        gen_r32_i32_sbb(self, dst, src);
    }
}

impl<'a> SBB<ESP, i8> for Assembler<'a> {
    fn sbb(&mut self, dst: ESP, src: i8) {
        gen_r32_i8_sbb(self, dst, src);
    }
}

impl<'a> SBB<ESP, i32> for Assembler<'a> {
    fn sbb(&mut self, dst: ESP, src: i32) {
        gen_r32_i32_sbb(self, dst, src);
    }
}

impl<'a> AND<CL, i8> for Assembler<'a> {
    fn and(&mut self, dst: CL, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<AH, i8> for Assembler<'a> {
    fn and(&mut self, dst: AH, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<R13B, i8> for Assembler<'a> {
    fn and(&mut self, dst: R13B, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<R15B, i8> for Assembler<'a> {
    fn and(&mut self, dst: R15B, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<BH, i8> for Assembler<'a> {
    fn and(&mut self, dst: BH, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<DIL, i8> for Assembler<'a> {
    fn and(&mut self, dst: DIL, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<R12B, i8> for Assembler<'a> {
    fn and(&mut self, dst: R12B, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<SIL, i8> for Assembler<'a> {
    fn and(&mut self, dst: SIL, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<R14B, i8> for Assembler<'a> {
    fn and(&mut self, dst: R14B, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<R10B, i8> for Assembler<'a> {
    fn and(&mut self, dst: R10B, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<R8B, i8> for Assembler<'a> {
    fn and(&mut self, dst: R8B, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<BL, i8> for Assembler<'a> {
    fn and(&mut self, dst: BL, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<SPL, i8> for Assembler<'a> {
    fn and(&mut self, dst: SPL, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<CH, i8> for Assembler<'a> {
    fn and(&mut self, dst: CH, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<DH, i8> for Assembler<'a> {
    fn and(&mut self, dst: DH, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<R9B, i8> for Assembler<'a> {
    fn and(&mut self, dst: R9B, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<DL, i8> for Assembler<'a> {
    fn and(&mut self, dst: DL, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<BPL, i8> for Assembler<'a> {
    fn and(&mut self, dst: BPL, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<R11B, i8> for Assembler<'a> {
    fn and(&mut self, dst: R11B, src: i8) {
        gen_r8_i8_and(self, dst, src);
    }
}

impl<'a> AND<BX, i8> for Assembler<'a> {
    fn and(&mut self, dst: BX, src: i8) {
        gen_r16_i8_and(self, dst, src);
    }
}

impl<'a> AND<BX, i16> for Assembler<'a> {
    fn and(&mut self, dst: BX, src: i16) {
        gen_r16_i16_and(self, dst, src);
    }
}

impl<'a> AND<AX, i8> for Assembler<'a> {
    fn and(&mut self, dst: AX, src: i8) {
        gen_r16_i8_and(self, dst, src);
    }
}

impl<'a> AND<AX, i16> for Assembler<'a> {
    fn and(&mut self, dst: AX, src: i16) {
        gen_r16_i16_and(self, dst, src);
    }
}

impl<'a> AND<DX, i8> for Assembler<'a> {
    fn and(&mut self, dst: DX, src: i8) {
        gen_r16_i8_and(self, dst, src);
    }
}

impl<'a> AND<DX, i16> for Assembler<'a> {
    fn and(&mut self, dst: DX, src: i16) {
        gen_r16_i16_and(self, dst, src);
    }
}

impl<'a> AND<R8W, i8> for Assembler<'a> {
    fn and(&mut self, dst: R8W, src: i8) {
        gen_r16_i8_and(self, dst, src);
    }
}

impl<'a> AND<R8W, i16> for Assembler<'a> {
    fn and(&mut self, dst: R8W, src: i16) {
        gen_r16_i16_and(self, dst, src);
    }
}

impl<'a> AND<R11W, i8> for Assembler<'a> {
    fn and(&mut self, dst: R11W, src: i8) {
        gen_r16_i8_and(self, dst, src);
    }
}

impl<'a> AND<R11W, i16> for Assembler<'a> {
    fn and(&mut self, dst: R11W, src: i16) {
        gen_r16_i16_and(self, dst, src);
    }
}

impl<'a> AND<SP, i8> for Assembler<'a> {
    fn and(&mut self, dst: SP, src: i8) {
        gen_r16_i8_and(self, dst, src);
    }
}

impl<'a> AND<SP, i16> for Assembler<'a> {
    fn and(&mut self, dst: SP, src: i16) {
        gen_r16_i16_and(self, dst, src);
    }
}

impl<'a> AND<CX, i8> for Assembler<'a> {
    fn and(&mut self, dst: CX, src: i8) {
        gen_r16_i8_and(self, dst, src);
    }
}

impl<'a> AND<CX, i16> for Assembler<'a> {
    fn and(&mut self, dst: CX, src: i16) {
        gen_r16_i16_and(self, dst, src);
    }
}

impl<'a> AND<R12W, i8> for Assembler<'a> {
    fn and(&mut self, dst: R12W, src: i8) {
        gen_r16_i8_and(self, dst, src);
    }
}

impl<'a> AND<R12W, i16> for Assembler<'a> {
    fn and(&mut self, dst: R12W, src: i16) {
        gen_r16_i16_and(self, dst, src);
    }
}

impl<'a> AND<R14W, i8> for Assembler<'a> {
    fn and(&mut self, dst: R14W, src: i8) {
        gen_r16_i8_and(self, dst, src);
    }
}

impl<'a> AND<R14W, i16> for Assembler<'a> {
    fn and(&mut self, dst: R14W, src: i16) {
        gen_r16_i16_and(self, dst, src);
    }
}

impl<'a> AND<R10W, i8> for Assembler<'a> {
    fn and(&mut self, dst: R10W, src: i8) {
        gen_r16_i8_and(self, dst, src);
    }
}

impl<'a> AND<R10W, i16> for Assembler<'a> {
    fn and(&mut self, dst: R10W, src: i16) {
        gen_r16_i16_and(self, dst, src);
    }
}

impl<'a> AND<R13W, i8> for Assembler<'a> {
    fn and(&mut self, dst: R13W, src: i8) {
        gen_r16_i8_and(self, dst, src);
    }
}

impl<'a> AND<R13W, i16> for Assembler<'a> {
    fn and(&mut self, dst: R13W, src: i16) {
        gen_r16_i16_and(self, dst, src);
    }
}

impl<'a> AND<BP, i8> for Assembler<'a> {
    fn and(&mut self, dst: BP, src: i8) {
        gen_r16_i8_and(self, dst, src);
    }
}

impl<'a> AND<BP, i16> for Assembler<'a> {
    fn and(&mut self, dst: BP, src: i16) {
        gen_r16_i16_and(self, dst, src);
    }
}

impl<'a> AND<DI, i8> for Assembler<'a> {
    fn and(&mut self, dst: DI, src: i8) {
        gen_r16_i8_and(self, dst, src);
    }
}

impl<'a> AND<DI, i16> for Assembler<'a> {
    fn and(&mut self, dst: DI, src: i16) {
        gen_r16_i16_and(self, dst, src);
    }
}

impl<'a> AND<R9W, i8> for Assembler<'a> {
    fn and(&mut self, dst: R9W, src: i8) {
        gen_r16_i8_and(self, dst, src);
    }
}

impl<'a> AND<R9W, i16> for Assembler<'a> {
    fn and(&mut self, dst: R9W, src: i16) {
        gen_r16_i16_and(self, dst, src);
    }
}

impl<'a> AND<R15W, i8> for Assembler<'a> {
    fn and(&mut self, dst: R15W, src: i8) {
        gen_r16_i8_and(self, dst, src);
    }
}

impl<'a> AND<R15W, i16> for Assembler<'a> {
    fn and(&mut self, dst: R15W, src: i16) {
        gen_r16_i16_and(self, dst, src);
    }
}

impl<'a> AND<SI, i8> for Assembler<'a> {
    fn and(&mut self, dst: SI, src: i8) {
        gen_r16_i8_and(self, dst, src);
    }
}

impl<'a> AND<SI, i16> for Assembler<'a> {
    fn and(&mut self, dst: SI, src: i16) {
        gen_r16_i16_and(self, dst, src);
    }
}

impl<'a> AND<R8D, i8> for Assembler<'a> {
    fn and(&mut self, dst: R8D, src: i8) {
        gen_r32_i8_and(self, dst, src);
    }
}

impl<'a> AND<R8D, i32> for Assembler<'a> {
    fn and(&mut self, dst: R8D, src: i32) {
        gen_r32_i32_and(self, dst, src);
    }
}

impl<'a> AND<ECX, i8> for Assembler<'a> {
    fn and(&mut self, dst: ECX, src: i8) {
        gen_r32_i8_and(self, dst, src);
    }
}

impl<'a> AND<ECX, i32> for Assembler<'a> {
    fn and(&mut self, dst: ECX, src: i32) {
        gen_r32_i32_and(self, dst, src);
    }
}

impl<'a> AND<ESI, i8> for Assembler<'a> {
    fn and(&mut self, dst: ESI, src: i8) {
        gen_r32_i8_and(self, dst, src);
    }
}

impl<'a> AND<ESI, i32> for Assembler<'a> {
    fn and(&mut self, dst: ESI, src: i32) {
        gen_r32_i32_and(self, dst, src);
    }
}

impl<'a> AND<EAX, i8> for Assembler<'a> {
    fn and(&mut self, dst: EAX, src: i8) {
        gen_r32_i8_and(self, dst, src);
    }
}

impl<'a> AND<EAX, i32> for Assembler<'a> {
    fn and(&mut self, dst: EAX, src: i32) {
        gen_r32_i32_and(self, dst, src);
    }
}

impl<'a> AND<EBX, i8> for Assembler<'a> {
    fn and(&mut self, dst: EBX, src: i8) {
        gen_r32_i8_and(self, dst, src);
    }
}

impl<'a> AND<EBX, i32> for Assembler<'a> {
    fn and(&mut self, dst: EBX, src: i32) {
        gen_r32_i32_and(self, dst, src);
    }
}

impl<'a> AND<RSI, i8> for Assembler<'a> {
    fn and(&mut self, dst: RSI, src: i8) {
        gen_r64_i8_and(self, dst, src);
    }
}

impl<'a> AND<RSI, i32> for Assembler<'a> {
    fn and(&mut self, dst: RSI, src: i32) {
        gen_r64_i32_and(self, dst, src);
    }
}

impl<'a> AND<RBX, i8> for Assembler<'a> {
    fn and(&mut self, dst: RBX, src: i8) {
        gen_r64_i8_and(self, dst, src);
    }
}

impl<'a> AND<RBX, i32> for Assembler<'a> {
    fn and(&mut self, dst: RBX, src: i32) {
        gen_r64_i32_and(self, dst, src);
    }
}

impl<'a> AND<EBP, i8> for Assembler<'a> {
    fn and(&mut self, dst: EBP, src: i8) {
        gen_r32_i8_and(self, dst, src);
    }
}

impl<'a> AND<EBP, i32> for Assembler<'a> {
    fn and(&mut self, dst: EBP, src: i32) {
        gen_r32_i32_and(self, dst, src);
    }
}

impl<'a> AND<R14, i8> for Assembler<'a> {
    fn and(&mut self, dst: R14, src: i8) {
        gen_r64_i8_and(self, dst, src);
    }
}

impl<'a> AND<R14, i32> for Assembler<'a> {
    fn and(&mut self, dst: R14, src: i32) {
        gen_r64_i32_and(self, dst, src);
    }
}

impl<'a> AND<R10, i8> for Assembler<'a> {
    fn and(&mut self, dst: R10, src: i8) {
        gen_r64_i8_and(self, dst, src);
    }
}

impl<'a> AND<R10, i32> for Assembler<'a> {
    fn and(&mut self, dst: R10, src: i32) {
        gen_r64_i32_and(self, dst, src);
    }
}

impl<'a> AND<R9, i8> for Assembler<'a> {
    fn and(&mut self, dst: R9, src: i8) {
        gen_r64_i8_and(self, dst, src);
    }
}

impl<'a> AND<R9, i32> for Assembler<'a> {
    fn and(&mut self, dst: R9, src: i32) {
        gen_r64_i32_and(self, dst, src);
    }
}

impl<'a> AND<RBP, i8> for Assembler<'a> {
    fn and(&mut self, dst: RBP, src: i8) {
        gen_r64_i8_and(self, dst, src);
    }
}

impl<'a> AND<RBP, i32> for Assembler<'a> {
    fn and(&mut self, dst: RBP, src: i32) {
        gen_r64_i32_and(self, dst, src);
    }
}

impl<'a> AND<R15, i8> for Assembler<'a> {
    fn and(&mut self, dst: R15, src: i8) {
        gen_r64_i8_and(self, dst, src);
    }
}

impl<'a> AND<R15, i32> for Assembler<'a> {
    fn and(&mut self, dst: R15, src: i32) {
        gen_r64_i32_and(self, dst, src);
    }
}

impl<'a> AND<R12, i8> for Assembler<'a> {
    fn and(&mut self, dst: R12, src: i8) {
        gen_r64_i8_and(self, dst, src);
    }
}

impl<'a> AND<R12, i32> for Assembler<'a> {
    fn and(&mut self, dst: R12, src: i32) {
        gen_r64_i32_and(self, dst, src);
    }
}

impl<'a> AND<R11D, i8> for Assembler<'a> {
    fn and(&mut self, dst: R11D, src: i8) {
        gen_r32_i8_and(self, dst, src);
    }
}

impl<'a> AND<R11D, i32> for Assembler<'a> {
    fn and(&mut self, dst: R11D, src: i32) {
        gen_r32_i32_and(self, dst, src);
    }
}

impl<'a> AND<RDX, i8> for Assembler<'a> {
    fn and(&mut self, dst: RDX, src: i8) {
        gen_r64_i8_and(self, dst, src);
    }
}

impl<'a> AND<RDX, i32> for Assembler<'a> {
    fn and(&mut self, dst: RDX, src: i32) {
        gen_r64_i32_and(self, dst, src);
    }
}

impl<'a> AND<R15D, i8> for Assembler<'a> {
    fn and(&mut self, dst: R15D, src: i8) {
        gen_r32_i8_and(self, dst, src);
    }
}

impl<'a> AND<R15D, i32> for Assembler<'a> {
    fn and(&mut self, dst: R15D, src: i32) {
        gen_r32_i32_and(self, dst, src);
    }
}

impl<'a> AND<R9D, i8> for Assembler<'a> {
    fn and(&mut self, dst: R9D, src: i8) {
        gen_r32_i8_and(self, dst, src);
    }
}

impl<'a> AND<R9D, i32> for Assembler<'a> {
    fn and(&mut self, dst: R9D, src: i32) {
        gen_r32_i32_and(self, dst, src);
    }
}

impl<'a> AND<RDI, i8> for Assembler<'a> {
    fn and(&mut self, dst: RDI, src: i8) {
        gen_r64_i8_and(self, dst, src);
    }
}

impl<'a> AND<RDI, i32> for Assembler<'a> {
    fn and(&mut self, dst: RDI, src: i32) {
        gen_r64_i32_and(self, dst, src);
    }
}

impl<'a> AND<R14D, i8> for Assembler<'a> {
    fn and(&mut self, dst: R14D, src: i8) {
        gen_r32_i8_and(self, dst, src);
    }
}

impl<'a> AND<R14D, i32> for Assembler<'a> {
    fn and(&mut self, dst: R14D, src: i32) {
        gen_r32_i32_and(self, dst, src);
    }
}

impl<'a> AND<R12D, i8> for Assembler<'a> {
    fn and(&mut self, dst: R12D, src: i8) {
        gen_r32_i8_and(self, dst, src);
    }
}

impl<'a> AND<R12D, i32> for Assembler<'a> {
    fn and(&mut self, dst: R12D, src: i32) {
        gen_r32_i32_and(self, dst, src);
    }
}

impl<'a> AND<RCX, i8> for Assembler<'a> {
    fn and(&mut self, dst: RCX, src: i8) {
        gen_r64_i8_and(self, dst, src);
    }
}

impl<'a> AND<RCX, i32> for Assembler<'a> {
    fn and(&mut self, dst: RCX, src: i32) {
        gen_r64_i32_and(self, dst, src);
    }
}

impl<'a> AND<RAX, i8> for Assembler<'a> {
    fn and(&mut self, dst: RAX, src: i8) {
        gen_r64_i8_and(self, dst, src);
    }
}

impl<'a> AND<RAX, i32> for Assembler<'a> {
    fn and(&mut self, dst: RAX, src: i32) {
        gen_r64_i32_and(self, dst, src);
    }
}

impl<'a> AND<EDI, i8> for Assembler<'a> {
    fn and(&mut self, dst: EDI, src: i8) {
        gen_r32_i8_and(self, dst, src);
    }
}

impl<'a> AND<EDI, i32> for Assembler<'a> {
    fn and(&mut self, dst: EDI, src: i32) {
        gen_r32_i32_and(self, dst, src);
    }
}

impl<'a> AND<EDX, i8> for Assembler<'a> {
    fn and(&mut self, dst: EDX, src: i8) {
        gen_r32_i8_and(self, dst, src);
    }
}

impl<'a> AND<EDX, i32> for Assembler<'a> {
    fn and(&mut self, dst: EDX, src: i32) {
        gen_r32_i32_and(self, dst, src);
    }
}

impl<'a> AND<R13, i8> for Assembler<'a> {
    fn and(&mut self, dst: R13, src: i8) {
        gen_r64_i8_and(self, dst, src);
    }
}

impl<'a> AND<R13, i32> for Assembler<'a> {
    fn and(&mut self, dst: R13, src: i32) {
        gen_r64_i32_and(self, dst, src);
    }
}

impl<'a> AND<R11, i8> for Assembler<'a> {
    fn and(&mut self, dst: R11, src: i8) {
        gen_r64_i8_and(self, dst, src);
    }
}

impl<'a> AND<R11, i32> for Assembler<'a> {
    fn and(&mut self, dst: R11, src: i32) {
        gen_r64_i32_and(self, dst, src);
    }
}

impl<'a> AND<R8, i8> for Assembler<'a> {
    fn and(&mut self, dst: R8, src: i8) {
        gen_r64_i8_and(self, dst, src);
    }
}

impl<'a> AND<R8, i32> for Assembler<'a> {
    fn and(&mut self, dst: R8, src: i32) {
        gen_r64_i32_and(self, dst, src);
    }
}

impl<'a> AND<RSP, i8> for Assembler<'a> {
    fn and(&mut self, dst: RSP, src: i8) {
        gen_r64_i8_and(self, dst, src);
    }
}

impl<'a> AND<RSP, i32> for Assembler<'a> {
    fn and(&mut self, dst: RSP, src: i32) {
        gen_r64_i32_and(self, dst, src);
    }
}

impl<'a> AND<R10D, i8> for Assembler<'a> {
    fn and(&mut self, dst: R10D, src: i8) {
        gen_r32_i8_and(self, dst, src);
    }
}

impl<'a> AND<R10D, i32> for Assembler<'a> {
    fn and(&mut self, dst: R10D, src: i32) {
        gen_r32_i32_and(self, dst, src);
    }
}

impl<'a> AND<ESP, i8> for Assembler<'a> {
    fn and(&mut self, dst: ESP, src: i8) {
        gen_r32_i8_and(self, dst, src);
    }
}

impl<'a> AND<ESP, i32> for Assembler<'a> {
    fn and(&mut self, dst: ESP, src: i32) {
        gen_r32_i32_and(self, dst, src);
    }
}

impl<'a> SUB<CL, i8> for Assembler<'a> {
    fn sub(&mut self, dst: CL, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<AH, i8> for Assembler<'a> {
    fn sub(&mut self, dst: AH, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R13B, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R13B, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R15B, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R15B, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<BH, i8> for Assembler<'a> {
    fn sub(&mut self, dst: BH, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<DIL, i8> for Assembler<'a> {
    fn sub(&mut self, dst: DIL, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R12B, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R12B, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<SIL, i8> for Assembler<'a> {
    fn sub(&mut self, dst: SIL, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R14B, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R14B, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R10B, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R10B, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R8B, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R8B, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<BL, i8> for Assembler<'a> {
    fn sub(&mut self, dst: BL, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<SPL, i8> for Assembler<'a> {
    fn sub(&mut self, dst: SPL, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<CH, i8> for Assembler<'a> {
    fn sub(&mut self, dst: CH, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<DH, i8> for Assembler<'a> {
    fn sub(&mut self, dst: DH, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R9B, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R9B, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<DL, i8> for Assembler<'a> {
    fn sub(&mut self, dst: DL, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<BPL, i8> for Assembler<'a> {
    fn sub(&mut self, dst: BPL, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R11B, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R11B, src: i8) {
        gen_r8_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<BX, i8> for Assembler<'a> {
    fn sub(&mut self, dst: BX, src: i8) {
        gen_r16_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<BX, i16> for Assembler<'a> {
    fn sub(&mut self, dst: BX, src: i16) {
        gen_r16_i16_sub(self, dst, src);
    }
}

impl<'a> SUB<AX, i8> for Assembler<'a> {
    fn sub(&mut self, dst: AX, src: i8) {
        gen_r16_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<AX, i16> for Assembler<'a> {
    fn sub(&mut self, dst: AX, src: i16) {
        gen_r16_i16_sub(self, dst, src);
    }
}

impl<'a> SUB<DX, i8> for Assembler<'a> {
    fn sub(&mut self, dst: DX, src: i8) {
        gen_r16_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<DX, i16> for Assembler<'a> {
    fn sub(&mut self, dst: DX, src: i16) {
        gen_r16_i16_sub(self, dst, src);
    }
}

impl<'a> SUB<R8W, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R8W, src: i8) {
        gen_r16_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R8W, i16> for Assembler<'a> {
    fn sub(&mut self, dst: R8W, src: i16) {
        gen_r16_i16_sub(self, dst, src);
    }
}

impl<'a> SUB<R11W, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R11W, src: i8) {
        gen_r16_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R11W, i16> for Assembler<'a> {
    fn sub(&mut self, dst: R11W, src: i16) {
        gen_r16_i16_sub(self, dst, src);
    }
}

impl<'a> SUB<SP, i8> for Assembler<'a> {
    fn sub(&mut self, dst: SP, src: i8) {
        gen_r16_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<SP, i16> for Assembler<'a> {
    fn sub(&mut self, dst: SP, src: i16) {
        gen_r16_i16_sub(self, dst, src);
    }
}

impl<'a> SUB<CX, i8> for Assembler<'a> {
    fn sub(&mut self, dst: CX, src: i8) {
        gen_r16_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<CX, i16> for Assembler<'a> {
    fn sub(&mut self, dst: CX, src: i16) {
        gen_r16_i16_sub(self, dst, src);
    }
}

impl<'a> SUB<R12W, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R12W, src: i8) {
        gen_r16_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R12W, i16> for Assembler<'a> {
    fn sub(&mut self, dst: R12W, src: i16) {
        gen_r16_i16_sub(self, dst, src);
    }
}

impl<'a> SUB<R14W, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R14W, src: i8) {
        gen_r16_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R14W, i16> for Assembler<'a> {
    fn sub(&mut self, dst: R14W, src: i16) {
        gen_r16_i16_sub(self, dst, src);
    }
}

impl<'a> SUB<R10W, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R10W, src: i8) {
        gen_r16_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R10W, i16> for Assembler<'a> {
    fn sub(&mut self, dst: R10W, src: i16) {
        gen_r16_i16_sub(self, dst, src);
    }
}

impl<'a> SUB<R13W, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R13W, src: i8) {
        gen_r16_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R13W, i16> for Assembler<'a> {
    fn sub(&mut self, dst: R13W, src: i16) {
        gen_r16_i16_sub(self, dst, src);
    }
}

impl<'a> SUB<BP, i8> for Assembler<'a> {
    fn sub(&mut self, dst: BP, src: i8) {
        gen_r16_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<BP, i16> for Assembler<'a> {
    fn sub(&mut self, dst: BP, src: i16) {
        gen_r16_i16_sub(self, dst, src);
    }
}

impl<'a> SUB<DI, i8> for Assembler<'a> {
    fn sub(&mut self, dst: DI, src: i8) {
        gen_r16_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<DI, i16> for Assembler<'a> {
    fn sub(&mut self, dst: DI, src: i16) {
        gen_r16_i16_sub(self, dst, src);
    }
}

impl<'a> SUB<R9W, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R9W, src: i8) {
        gen_r16_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R9W, i16> for Assembler<'a> {
    fn sub(&mut self, dst: R9W, src: i16) {
        gen_r16_i16_sub(self, dst, src);
    }
}

impl<'a> SUB<R15W, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R15W, src: i8) {
        gen_r16_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R15W, i16> for Assembler<'a> {
    fn sub(&mut self, dst: R15W, src: i16) {
        gen_r16_i16_sub(self, dst, src);
    }
}

impl<'a> SUB<SI, i8> for Assembler<'a> {
    fn sub(&mut self, dst: SI, src: i8) {
        gen_r16_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<SI, i16> for Assembler<'a> {
    fn sub(&mut self, dst: SI, src: i16) {
        gen_r16_i16_sub(self, dst, src);
    }
}

impl<'a> SUB<R8D, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R8D, src: i8) {
        gen_r32_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R8D, i32> for Assembler<'a> {
    fn sub(&mut self, dst: R8D, src: i32) {
        gen_r32_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<ECX, i8> for Assembler<'a> {
    fn sub(&mut self, dst: ECX, src: i8) {
        gen_r32_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<ECX, i32> for Assembler<'a> {
    fn sub(&mut self, dst: ECX, src: i32) {
        gen_r32_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<ESI, i8> for Assembler<'a> {
    fn sub(&mut self, dst: ESI, src: i8) {
        gen_r32_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<ESI, i32> for Assembler<'a> {
    fn sub(&mut self, dst: ESI, src: i32) {
        gen_r32_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<EAX, i8> for Assembler<'a> {
    fn sub(&mut self, dst: EAX, src: i8) {
        gen_r32_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<EAX, i32> for Assembler<'a> {
    fn sub(&mut self, dst: EAX, src: i32) {
        gen_r32_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<EBX, i8> for Assembler<'a> {
    fn sub(&mut self, dst: EBX, src: i8) {
        gen_r32_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<EBX, i32> for Assembler<'a> {
    fn sub(&mut self, dst: EBX, src: i32) {
        gen_r32_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<RSI, i8> for Assembler<'a> {
    fn sub(&mut self, dst: RSI, src: i8) {
        gen_r64_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<RSI, i32> for Assembler<'a> {
    fn sub(&mut self, dst: RSI, src: i32) {
        gen_r64_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<RBX, i8> for Assembler<'a> {
    fn sub(&mut self, dst: RBX, src: i8) {
        gen_r64_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<RBX, i32> for Assembler<'a> {
    fn sub(&mut self, dst: RBX, src: i32) {
        gen_r64_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<EBP, i8> for Assembler<'a> {
    fn sub(&mut self, dst: EBP, src: i8) {
        gen_r32_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<EBP, i32> for Assembler<'a> {
    fn sub(&mut self, dst: EBP, src: i32) {
        gen_r32_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<R14, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R14, src: i8) {
        gen_r64_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R14, i32> for Assembler<'a> {
    fn sub(&mut self, dst: R14, src: i32) {
        gen_r64_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<R10, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R10, src: i8) {
        gen_r64_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R10, i32> for Assembler<'a> {
    fn sub(&mut self, dst: R10, src: i32) {
        gen_r64_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<R9, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R9, src: i8) {
        gen_r64_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R9, i32> for Assembler<'a> {
    fn sub(&mut self, dst: R9, src: i32) {
        gen_r64_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<RBP, i8> for Assembler<'a> {
    fn sub(&mut self, dst: RBP, src: i8) {
        gen_r64_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<RBP, i32> for Assembler<'a> {
    fn sub(&mut self, dst: RBP, src: i32) {
        gen_r64_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<R15, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R15, src: i8) {
        gen_r64_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R15, i32> for Assembler<'a> {
    fn sub(&mut self, dst: R15, src: i32) {
        gen_r64_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<R12, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R12, src: i8) {
        gen_r64_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R12, i32> for Assembler<'a> {
    fn sub(&mut self, dst: R12, src: i32) {
        gen_r64_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<R11D, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R11D, src: i8) {
        gen_r32_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R11D, i32> for Assembler<'a> {
    fn sub(&mut self, dst: R11D, src: i32) {
        gen_r32_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<RDX, i8> for Assembler<'a> {
    fn sub(&mut self, dst: RDX, src: i8) {
        gen_r64_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<RDX, i32> for Assembler<'a> {
    fn sub(&mut self, dst: RDX, src: i32) {
        gen_r64_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<R15D, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R15D, src: i8) {
        gen_r32_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R15D, i32> for Assembler<'a> {
    fn sub(&mut self, dst: R15D, src: i32) {
        gen_r32_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<R9D, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R9D, src: i8) {
        gen_r32_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R9D, i32> for Assembler<'a> {
    fn sub(&mut self, dst: R9D, src: i32) {
        gen_r32_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<RDI, i8> for Assembler<'a> {
    fn sub(&mut self, dst: RDI, src: i8) {
        gen_r64_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<RDI, i32> for Assembler<'a> {
    fn sub(&mut self, dst: RDI, src: i32) {
        gen_r64_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<R14D, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R14D, src: i8) {
        gen_r32_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R14D, i32> for Assembler<'a> {
    fn sub(&mut self, dst: R14D, src: i32) {
        gen_r32_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<R12D, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R12D, src: i8) {
        gen_r32_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R12D, i32> for Assembler<'a> {
    fn sub(&mut self, dst: R12D, src: i32) {
        gen_r32_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<RCX, i8> for Assembler<'a> {
    fn sub(&mut self, dst: RCX, src: i8) {
        gen_r64_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<RCX, i32> for Assembler<'a> {
    fn sub(&mut self, dst: RCX, src: i32) {
        gen_r64_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<RAX, i8> for Assembler<'a> {
    fn sub(&mut self, dst: RAX, src: i8) {
        gen_r64_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<RAX, i32> for Assembler<'a> {
    fn sub(&mut self, dst: RAX, src: i32) {
        gen_r64_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<EDI, i8> for Assembler<'a> {
    fn sub(&mut self, dst: EDI, src: i8) {
        gen_r32_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<EDI, i32> for Assembler<'a> {
    fn sub(&mut self, dst: EDI, src: i32) {
        gen_r32_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<EDX, i8> for Assembler<'a> {
    fn sub(&mut self, dst: EDX, src: i8) {
        gen_r32_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<EDX, i32> for Assembler<'a> {
    fn sub(&mut self, dst: EDX, src: i32) {
        gen_r32_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<R13, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R13, src: i8) {
        gen_r64_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R13, i32> for Assembler<'a> {
    fn sub(&mut self, dst: R13, src: i32) {
        gen_r64_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<R11, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R11, src: i8) {
        gen_r64_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R11, i32> for Assembler<'a> {
    fn sub(&mut self, dst: R11, src: i32) {
        gen_r64_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<R8, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R8, src: i8) {
        gen_r64_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R8, i32> for Assembler<'a> {
    fn sub(&mut self, dst: R8, src: i32) {
        gen_r64_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<RSP, i8> for Assembler<'a> {
    fn sub(&mut self, dst: RSP, src: i8) {
        gen_r64_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<RSP, i32> for Assembler<'a> {
    fn sub(&mut self, dst: RSP, src: i32) {
        gen_r64_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<R10D, i8> for Assembler<'a> {
    fn sub(&mut self, dst: R10D, src: i8) {
        gen_r32_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<R10D, i32> for Assembler<'a> {
    fn sub(&mut self, dst: R10D, src: i32) {
        gen_r32_i32_sub(self, dst, src);
    }
}

impl<'a> SUB<ESP, i8> for Assembler<'a> {
    fn sub(&mut self, dst: ESP, src: i8) {
        gen_r32_i8_sub(self, dst, src);
    }
}

impl<'a> SUB<ESP, i32> for Assembler<'a> {
    fn sub(&mut self, dst: ESP, src: i32) {
        gen_r32_i32_sub(self, dst, src);
    }
}

impl<'a> XOR<CL, i8> for Assembler<'a> {
    fn xor(&mut self, dst: CL, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<AH, i8> for Assembler<'a> {
    fn xor(&mut self, dst: AH, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R13B, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R13B, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R15B, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R15B, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<BH, i8> for Assembler<'a> {
    fn xor(&mut self, dst: BH, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<DIL, i8> for Assembler<'a> {
    fn xor(&mut self, dst: DIL, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R12B, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R12B, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<SIL, i8> for Assembler<'a> {
    fn xor(&mut self, dst: SIL, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R14B, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R14B, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R10B, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R10B, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R8B, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R8B, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<BL, i8> for Assembler<'a> {
    fn xor(&mut self, dst: BL, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<SPL, i8> for Assembler<'a> {
    fn xor(&mut self, dst: SPL, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<CH, i8> for Assembler<'a> {
    fn xor(&mut self, dst: CH, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<DH, i8> for Assembler<'a> {
    fn xor(&mut self, dst: DH, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R9B, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R9B, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<DL, i8> for Assembler<'a> {
    fn xor(&mut self, dst: DL, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<BPL, i8> for Assembler<'a> {
    fn xor(&mut self, dst: BPL, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R11B, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R11B, src: i8) {
        gen_r8_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<BX, i8> for Assembler<'a> {
    fn xor(&mut self, dst: BX, src: i8) {
        gen_r16_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<BX, i16> for Assembler<'a> {
    fn xor(&mut self, dst: BX, src: i16) {
        gen_r16_i16_xor(self, dst, src);
    }
}

impl<'a> XOR<AX, i8> for Assembler<'a> {
    fn xor(&mut self, dst: AX, src: i8) {
        gen_r16_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<AX, i16> for Assembler<'a> {
    fn xor(&mut self, dst: AX, src: i16) {
        gen_r16_i16_xor(self, dst, src);
    }
}

impl<'a> XOR<DX, i8> for Assembler<'a> {
    fn xor(&mut self, dst: DX, src: i8) {
        gen_r16_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<DX, i16> for Assembler<'a> {
    fn xor(&mut self, dst: DX, src: i16) {
        gen_r16_i16_xor(self, dst, src);
    }
}

impl<'a> XOR<R8W, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R8W, src: i8) {
        gen_r16_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R8W, i16> for Assembler<'a> {
    fn xor(&mut self, dst: R8W, src: i16) {
        gen_r16_i16_xor(self, dst, src);
    }
}

impl<'a> XOR<R11W, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R11W, src: i8) {
        gen_r16_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R11W, i16> for Assembler<'a> {
    fn xor(&mut self, dst: R11W, src: i16) {
        gen_r16_i16_xor(self, dst, src);
    }
}

impl<'a> XOR<SP, i8> for Assembler<'a> {
    fn xor(&mut self, dst: SP, src: i8) {
        gen_r16_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<SP, i16> for Assembler<'a> {
    fn xor(&mut self, dst: SP, src: i16) {
        gen_r16_i16_xor(self, dst, src);
    }
}

impl<'a> XOR<CX, i8> for Assembler<'a> {
    fn xor(&mut self, dst: CX, src: i8) {
        gen_r16_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<CX, i16> for Assembler<'a> {
    fn xor(&mut self, dst: CX, src: i16) {
        gen_r16_i16_xor(self, dst, src);
    }
}

impl<'a> XOR<R12W, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R12W, src: i8) {
        gen_r16_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R12W, i16> for Assembler<'a> {
    fn xor(&mut self, dst: R12W, src: i16) {
        gen_r16_i16_xor(self, dst, src);
    }
}

impl<'a> XOR<R14W, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R14W, src: i8) {
        gen_r16_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R14W, i16> for Assembler<'a> {
    fn xor(&mut self, dst: R14W, src: i16) {
        gen_r16_i16_xor(self, dst, src);
    }
}

impl<'a> XOR<R10W, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R10W, src: i8) {
        gen_r16_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R10W, i16> for Assembler<'a> {
    fn xor(&mut self, dst: R10W, src: i16) {
        gen_r16_i16_xor(self, dst, src);
    }
}

impl<'a> XOR<R13W, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R13W, src: i8) {
        gen_r16_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R13W, i16> for Assembler<'a> {
    fn xor(&mut self, dst: R13W, src: i16) {
        gen_r16_i16_xor(self, dst, src);
    }
}

impl<'a> XOR<BP, i8> for Assembler<'a> {
    fn xor(&mut self, dst: BP, src: i8) {
        gen_r16_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<BP, i16> for Assembler<'a> {
    fn xor(&mut self, dst: BP, src: i16) {
        gen_r16_i16_xor(self, dst, src);
    }
}

impl<'a> XOR<DI, i8> for Assembler<'a> {
    fn xor(&mut self, dst: DI, src: i8) {
        gen_r16_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<DI, i16> for Assembler<'a> {
    fn xor(&mut self, dst: DI, src: i16) {
        gen_r16_i16_xor(self, dst, src);
    }
}

impl<'a> XOR<R9W, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R9W, src: i8) {
        gen_r16_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R9W, i16> for Assembler<'a> {
    fn xor(&mut self, dst: R9W, src: i16) {
        gen_r16_i16_xor(self, dst, src);
    }
}

impl<'a> XOR<R15W, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R15W, src: i8) {
        gen_r16_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R15W, i16> for Assembler<'a> {
    fn xor(&mut self, dst: R15W, src: i16) {
        gen_r16_i16_xor(self, dst, src);
    }
}

impl<'a> XOR<SI, i8> for Assembler<'a> {
    fn xor(&mut self, dst: SI, src: i8) {
        gen_r16_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<SI, i16> for Assembler<'a> {
    fn xor(&mut self, dst: SI, src: i16) {
        gen_r16_i16_xor(self, dst, src);
    }
}

impl<'a> XOR<R8D, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R8D, src: i8) {
        gen_r32_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R8D, i32> for Assembler<'a> {
    fn xor(&mut self, dst: R8D, src: i32) {
        gen_r32_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<ECX, i8> for Assembler<'a> {
    fn xor(&mut self, dst: ECX, src: i8) {
        gen_r32_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<ECX, i32> for Assembler<'a> {
    fn xor(&mut self, dst: ECX, src: i32) {
        gen_r32_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<ESI, i8> for Assembler<'a> {
    fn xor(&mut self, dst: ESI, src: i8) {
        gen_r32_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<ESI, i32> for Assembler<'a> {
    fn xor(&mut self, dst: ESI, src: i32) {
        gen_r32_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<EAX, i8> for Assembler<'a> {
    fn xor(&mut self, dst: EAX, src: i8) {
        gen_r32_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<EAX, i32> for Assembler<'a> {
    fn xor(&mut self, dst: EAX, src: i32) {
        gen_r32_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<EBX, i8> for Assembler<'a> {
    fn xor(&mut self, dst: EBX, src: i8) {
        gen_r32_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<EBX, i32> for Assembler<'a> {
    fn xor(&mut self, dst: EBX, src: i32) {
        gen_r32_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<RSI, i8> for Assembler<'a> {
    fn xor(&mut self, dst: RSI, src: i8) {
        gen_r64_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<RSI, i32> for Assembler<'a> {
    fn xor(&mut self, dst: RSI, src: i32) {
        gen_r64_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<RBX, i8> for Assembler<'a> {
    fn xor(&mut self, dst: RBX, src: i8) {
        gen_r64_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<RBX, i32> for Assembler<'a> {
    fn xor(&mut self, dst: RBX, src: i32) {
        gen_r64_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<EBP, i8> for Assembler<'a> {
    fn xor(&mut self, dst: EBP, src: i8) {
        gen_r32_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<EBP, i32> for Assembler<'a> {
    fn xor(&mut self, dst: EBP, src: i32) {
        gen_r32_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<R14, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R14, src: i8) {
        gen_r64_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R14, i32> for Assembler<'a> {
    fn xor(&mut self, dst: R14, src: i32) {
        gen_r64_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<R10, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R10, src: i8) {
        gen_r64_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R10, i32> for Assembler<'a> {
    fn xor(&mut self, dst: R10, src: i32) {
        gen_r64_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<R9, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R9, src: i8) {
        gen_r64_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R9, i32> for Assembler<'a> {
    fn xor(&mut self, dst: R9, src: i32) {
        gen_r64_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<RBP, i8> for Assembler<'a> {
    fn xor(&mut self, dst: RBP, src: i8) {
        gen_r64_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<RBP, i32> for Assembler<'a> {
    fn xor(&mut self, dst: RBP, src: i32) {
        gen_r64_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<R15, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R15, src: i8) {
        gen_r64_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R15, i32> for Assembler<'a> {
    fn xor(&mut self, dst: R15, src: i32) {
        gen_r64_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<R12, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R12, src: i8) {
        gen_r64_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R12, i32> for Assembler<'a> {
    fn xor(&mut self, dst: R12, src: i32) {
        gen_r64_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<R11D, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R11D, src: i8) {
        gen_r32_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R11D, i32> for Assembler<'a> {
    fn xor(&mut self, dst: R11D, src: i32) {
        gen_r32_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<RDX, i8> for Assembler<'a> {
    fn xor(&mut self, dst: RDX, src: i8) {
        gen_r64_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<RDX, i32> for Assembler<'a> {
    fn xor(&mut self, dst: RDX, src: i32) {
        gen_r64_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<R15D, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R15D, src: i8) {
        gen_r32_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R15D, i32> for Assembler<'a> {
    fn xor(&mut self, dst: R15D, src: i32) {
        gen_r32_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<R9D, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R9D, src: i8) {
        gen_r32_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R9D, i32> for Assembler<'a> {
    fn xor(&mut self, dst: R9D, src: i32) {
        gen_r32_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<RDI, i8> for Assembler<'a> {
    fn xor(&mut self, dst: RDI, src: i8) {
        gen_r64_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<RDI, i32> for Assembler<'a> {
    fn xor(&mut self, dst: RDI, src: i32) {
        gen_r64_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<R14D, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R14D, src: i8) {
        gen_r32_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R14D, i32> for Assembler<'a> {
    fn xor(&mut self, dst: R14D, src: i32) {
        gen_r32_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<R12D, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R12D, src: i8) {
        gen_r32_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R12D, i32> for Assembler<'a> {
    fn xor(&mut self, dst: R12D, src: i32) {
        gen_r32_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<RCX, i8> for Assembler<'a> {
    fn xor(&mut self, dst: RCX, src: i8) {
        gen_r64_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<RCX, i32> for Assembler<'a> {
    fn xor(&mut self, dst: RCX, src: i32) {
        gen_r64_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<RAX, i8> for Assembler<'a> {
    fn xor(&mut self, dst: RAX, src: i8) {
        gen_r64_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<RAX, i32> for Assembler<'a> {
    fn xor(&mut self, dst: RAX, src: i32) {
        gen_r64_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<EDI, i8> for Assembler<'a> {
    fn xor(&mut self, dst: EDI, src: i8) {
        gen_r32_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<EDI, i32> for Assembler<'a> {
    fn xor(&mut self, dst: EDI, src: i32) {
        gen_r32_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<EDX, i8> for Assembler<'a> {
    fn xor(&mut self, dst: EDX, src: i8) {
        gen_r32_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<EDX, i32> for Assembler<'a> {
    fn xor(&mut self, dst: EDX, src: i32) {
        gen_r32_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<R13, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R13, src: i8) {
        gen_r64_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R13, i32> for Assembler<'a> {
    fn xor(&mut self, dst: R13, src: i32) {
        gen_r64_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<R11, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R11, src: i8) {
        gen_r64_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R11, i32> for Assembler<'a> {
    fn xor(&mut self, dst: R11, src: i32) {
        gen_r64_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<R8, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R8, src: i8) {
        gen_r64_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R8, i32> for Assembler<'a> {
    fn xor(&mut self, dst: R8, src: i32) {
        gen_r64_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<RSP, i8> for Assembler<'a> {
    fn xor(&mut self, dst: RSP, src: i8) {
        gen_r64_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<RSP, i32> for Assembler<'a> {
    fn xor(&mut self, dst: RSP, src: i32) {
        gen_r64_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<R10D, i8> for Assembler<'a> {
    fn xor(&mut self, dst: R10D, src: i8) {
        gen_r32_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<R10D, i32> for Assembler<'a> {
    fn xor(&mut self, dst: R10D, src: i32) {
        gen_r32_i32_xor(self, dst, src);
    }
}

impl<'a> XOR<ESP, i8> for Assembler<'a> {
    fn xor(&mut self, dst: ESP, src: i8) {
        gen_r32_i8_xor(self, dst, src);
    }
}

impl<'a> XOR<ESP, i32> for Assembler<'a> {
    fn xor(&mut self, dst: ESP, src: i32) {
        gen_r32_i32_xor(self, dst, src);
    }
}

impl<'a> CMP<CL, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: CL, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<AH, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: AH, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R13B, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R13B, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R15B, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R15B, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<BH, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: BH, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<DIL, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: DIL, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R12B, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R12B, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<SIL, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: SIL, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R14B, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R14B, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R10B, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R10B, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R8B, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R8B, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<BL, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: BL, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<SPL, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: SPL, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<CH, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: CH, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<DH, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: DH, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R9B, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R9B, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<DL, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: DL, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<BPL, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: BPL, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R11B, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R11B, src: i8) {
        gen_r8_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<BX, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: BX, src: i8) {
        gen_r16_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<BX, i16> for Assembler<'a> {
    fn cmp(&mut self, dst: BX, src: i16) {
        gen_r16_i16_cmp(self, dst, src);
    }
}

impl<'a> CMP<AX, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: AX, src: i8) {
        gen_r16_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<AX, i16> for Assembler<'a> {
    fn cmp(&mut self, dst: AX, src: i16) {
        gen_r16_i16_cmp(self, dst, src);
    }
}

impl<'a> CMP<DX, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: DX, src: i8) {
        gen_r16_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<DX, i16> for Assembler<'a> {
    fn cmp(&mut self, dst: DX, src: i16) {
        gen_r16_i16_cmp(self, dst, src);
    }
}

impl<'a> CMP<R8W, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R8W, src: i8) {
        gen_r16_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R8W, i16> for Assembler<'a> {
    fn cmp(&mut self, dst: R8W, src: i16) {
        gen_r16_i16_cmp(self, dst, src);
    }
}

impl<'a> CMP<R11W, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R11W, src: i8) {
        gen_r16_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R11W, i16> for Assembler<'a> {
    fn cmp(&mut self, dst: R11W, src: i16) {
        gen_r16_i16_cmp(self, dst, src);
    }
}

impl<'a> CMP<SP, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: SP, src: i8) {
        gen_r16_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<SP, i16> for Assembler<'a> {
    fn cmp(&mut self, dst: SP, src: i16) {
        gen_r16_i16_cmp(self, dst, src);
    }
}

impl<'a> CMP<CX, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: CX, src: i8) {
        gen_r16_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<CX, i16> for Assembler<'a> {
    fn cmp(&mut self, dst: CX, src: i16) {
        gen_r16_i16_cmp(self, dst, src);
    }
}

impl<'a> CMP<R12W, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R12W, src: i8) {
        gen_r16_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R12W, i16> for Assembler<'a> {
    fn cmp(&mut self, dst: R12W, src: i16) {
        gen_r16_i16_cmp(self, dst, src);
    }
}

impl<'a> CMP<R14W, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R14W, src: i8) {
        gen_r16_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R14W, i16> for Assembler<'a> {
    fn cmp(&mut self, dst: R14W, src: i16) {
        gen_r16_i16_cmp(self, dst, src);
    }
}

impl<'a> CMP<R10W, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R10W, src: i8) {
        gen_r16_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R10W, i16> for Assembler<'a> {
    fn cmp(&mut self, dst: R10W, src: i16) {
        gen_r16_i16_cmp(self, dst, src);
    }
}

impl<'a> CMP<R13W, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R13W, src: i8) {
        gen_r16_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R13W, i16> for Assembler<'a> {
    fn cmp(&mut self, dst: R13W, src: i16) {
        gen_r16_i16_cmp(self, dst, src);
    }
}

impl<'a> CMP<BP, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: BP, src: i8) {
        gen_r16_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<BP, i16> for Assembler<'a> {
    fn cmp(&mut self, dst: BP, src: i16) {
        gen_r16_i16_cmp(self, dst, src);
    }
}

impl<'a> CMP<DI, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: DI, src: i8) {
        gen_r16_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<DI, i16> for Assembler<'a> {
    fn cmp(&mut self, dst: DI, src: i16) {
        gen_r16_i16_cmp(self, dst, src);
    }
}

impl<'a> CMP<R9W, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R9W, src: i8) {
        gen_r16_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R9W, i16> for Assembler<'a> {
    fn cmp(&mut self, dst: R9W, src: i16) {
        gen_r16_i16_cmp(self, dst, src);
    }
}

impl<'a> CMP<R15W, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R15W, src: i8) {
        gen_r16_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R15W, i16> for Assembler<'a> {
    fn cmp(&mut self, dst: R15W, src: i16) {
        gen_r16_i16_cmp(self, dst, src);
    }
}

impl<'a> CMP<SI, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: SI, src: i8) {
        gen_r16_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<SI, i16> for Assembler<'a> {
    fn cmp(&mut self, dst: SI, src: i16) {
        gen_r16_i16_cmp(self, dst, src);
    }
}

impl<'a> CMP<R8D, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R8D, src: i8) {
        gen_r32_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R8D, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: R8D, src: i32) {
        gen_r32_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<ECX, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: ECX, src: i8) {
        gen_r32_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<ECX, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: ECX, src: i32) {
        gen_r32_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<ESI, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: ESI, src: i8) {
        gen_r32_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<ESI, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: ESI, src: i32) {
        gen_r32_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<EAX, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: EAX, src: i8) {
        gen_r32_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<EAX, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: EAX, src: i32) {
        gen_r32_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<EBX, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: EBX, src: i8) {
        gen_r32_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<EBX, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: EBX, src: i32) {
        gen_r32_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<RSI, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: RSI, src: i8) {
        gen_r64_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<RSI, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: RSI, src: i32) {
        gen_r64_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<RBX, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: RBX, src: i8) {
        gen_r64_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<RBX, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: RBX, src: i32) {
        gen_r64_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<EBP, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: EBP, src: i8) {
        gen_r32_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<EBP, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: EBP, src: i32) {
        gen_r32_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<R14, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R14, src: i8) {
        gen_r64_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R14, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: R14, src: i32) {
        gen_r64_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<R10, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R10, src: i8) {
        gen_r64_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R10, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: R10, src: i32) {
        gen_r64_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<R9, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R9, src: i8) {
        gen_r64_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R9, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: R9, src: i32) {
        gen_r64_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<RBP, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: RBP, src: i8) {
        gen_r64_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<RBP, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: RBP, src: i32) {
        gen_r64_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<R15, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R15, src: i8) {
        gen_r64_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R15, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: R15, src: i32) {
        gen_r64_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<R12, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R12, src: i8) {
        gen_r64_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R12, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: R12, src: i32) {
        gen_r64_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<R11D, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R11D, src: i8) {
        gen_r32_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R11D, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: R11D, src: i32) {
        gen_r32_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<RDX, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: RDX, src: i8) {
        gen_r64_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<RDX, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: RDX, src: i32) {
        gen_r64_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<R15D, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R15D, src: i8) {
        gen_r32_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R15D, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: R15D, src: i32) {
        gen_r32_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<R9D, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R9D, src: i8) {
        gen_r32_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R9D, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: R9D, src: i32) {
        gen_r32_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<RDI, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: RDI, src: i8) {
        gen_r64_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<RDI, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: RDI, src: i32) {
        gen_r64_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<R14D, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R14D, src: i8) {
        gen_r32_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R14D, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: R14D, src: i32) {
        gen_r32_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<R12D, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R12D, src: i8) {
        gen_r32_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R12D, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: R12D, src: i32) {
        gen_r32_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<RCX, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: RCX, src: i8) {
        gen_r64_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<RCX, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: RCX, src: i32) {
        gen_r64_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<RAX, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: RAX, src: i8) {
        gen_r64_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<RAX, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: RAX, src: i32) {
        gen_r64_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<EDI, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: EDI, src: i8) {
        gen_r32_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<EDI, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: EDI, src: i32) {
        gen_r32_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<EDX, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: EDX, src: i8) {
        gen_r32_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<EDX, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: EDX, src: i32) {
        gen_r32_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<R13, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R13, src: i8) {
        gen_r64_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R13, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: R13, src: i32) {
        gen_r64_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<R11, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R11, src: i8) {
        gen_r64_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R11, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: R11, src: i32) {
        gen_r64_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<R8, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R8, src: i8) {
        gen_r64_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R8, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: R8, src: i32) {
        gen_r64_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<RSP, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: RSP, src: i8) {
        gen_r64_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<RSP, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: RSP, src: i32) {
        gen_r64_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<R10D, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: R10D, src: i8) {
        gen_r32_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<R10D, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: R10D, src: i32) {
        gen_r32_i32_cmp(self, dst, src);
    }
}

impl<'a> CMP<ESP, i8> for Assembler<'a> {
    fn cmp(&mut self, dst: ESP, src: i8) {
        gen_r32_i8_cmp(self, dst, src);
    }
}

impl<'a> CMP<ESP, i32> for Assembler<'a> {
    fn cmp(&mut self, dst: ESP, src: i32) {
        gen_r32_i32_cmp(self, dst, src);
    }
}

