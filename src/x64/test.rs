// Copyright 2016 Emily A. Bellows
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

// DO NOT MODIFY
// This file was generated by tools/gen_x64_tests.pl6

#![allow(non_snake_case)]

use super::*;
use super::Register::*;

#[test]
fn test_add_EAX__SIL() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(EAX, SIL).is_err());
}

#[test]
fn test_add_AH__AH() {
    let mut asm = Assembler::new(vec![]);
    asm.add(AH, AH).unwrap();
    assert_eq!(asm.done().unwrap(), vec![0x00, 0xE4]);
}

#[test]
fn test_add_AL__AL() {
    let mut asm = Assembler::new(vec![]);
    asm.add(AL, AL).unwrap();
    assert_eq!(asm.done().unwrap(), vec![0x00, 0xC0]);
}

#[test]
fn test_add_AX__EAX() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(AX, EAX).is_err());
}

#[test]
fn test_add_R8B__RAX() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(R8B, RAX).is_err());
}

#[test]
fn test_add_AX__AX() {
    let mut asm = Assembler::new(vec![]);
    asm.add(AX, AX).unwrap();
    assert_eq!(asm.done().unwrap(), vec![0x66, 0x01, 0xC0]);
}

#[test]
fn test_add_R8B__EAX() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(R8B, EAX).is_err());
}

#[test]
fn test_add_EAX__R8B() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(EAX, R8B).is_err());
}

#[test]
fn test_add_AX__SIL() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(AX, SIL).is_err());
}

#[test]
fn test_add_R8B__SIL() {
    let mut asm = Assembler::new(vec![]);
    asm.add(R8B, SIL).unwrap();
    assert_eq!(asm.done().unwrap(), vec![0x41, 0x00, 0xF0]);
}

#[test]
fn test_add_SIL__R8B() {
    let mut asm = Assembler::new(vec![]);
    asm.add(SIL, R8B).unwrap();
    assert_eq!(asm.done().unwrap(), vec![0x44, 0x00, 0xC6]);
}

#[test]
fn test_add_AH__SIL() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(AH, SIL).is_err());
}

#[test]
fn test_add_AX__AL() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(AX, AL).is_err());
}

#[test]
fn test_add_AL__AX() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(AL, AX).is_err());
}

#[test]
fn test_add_AL__R8B() {
    let mut asm = Assembler::new(vec![]);
    asm.add(AL, R8B).unwrap();
    assert_eq!(asm.done().unwrap(), vec![0x44, 0x00, 0xC0]);
}

#[test]
fn test_add_R8B__AX() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(R8B, AX).is_err());
}

#[test]
fn test_add_SIL__AH() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(SIL, AH).is_err());
}

#[test]
fn test_add_AH__AL() {
    let mut asm = Assembler::new(vec![]);
    asm.add(AH, AL).unwrap();
    assert_eq!(asm.done().unwrap(), vec![0x00, 0xC4]);
}

#[test]
fn test_add_SIL__RAX() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(SIL, RAX).is_err());
}

#[test]
fn test_add_SIL__AL() {
    let mut asm = Assembler::new(vec![]);
    asm.add(SIL, AL).unwrap();
    assert_eq!(asm.done().unwrap(), vec![0x40, 0x00, 0xC6]);
}

#[test]
fn test_add_EAX__AL() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(EAX, AL).is_err());
}

#[test]
fn test_add_RAX__EAX() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(RAX, EAX).is_err());
}

#[test]
fn test_add_AX__AH() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(AX, AH).is_err());
}

#[test]
fn test_add_RAX__AH() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(RAX, AH).is_err());
}

#[test]
fn test_add_SIL__EAX() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(SIL, EAX).is_err());
}

#[test]
fn test_add_R8B__AL() {
    let mut asm = Assembler::new(vec![]);
    asm.add(R8B, AL).unwrap();
    assert_eq!(asm.done().unwrap(), vec![0x41, 0x00, 0xC0]);
}

#[test]
fn test_add_EAX__AH() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(EAX, AH).is_err());
}

#[test]
fn test_add_RAX__SIL() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(RAX, SIL).is_err());
}

#[test]
fn test_add_AH__AX() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(AH, AX).is_err());
}

#[test]
fn test_add_AL__AH() {
    let mut asm = Assembler::new(vec![]);
    asm.add(AL, AH).unwrap();
    assert_eq!(asm.done().unwrap(), vec![0x00, 0xE0]);
}

#[test]
fn test_add_SIL__AX() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(SIL, AX).is_err());
}

#[test]
fn test_add_SIL__SIL() {
    let mut asm = Assembler::new(vec![]);
    asm.add(SIL, SIL).unwrap();
    assert_eq!(asm.done().unwrap(), vec![0x40, 0x00, 0xF6]);
}

#[test]
fn test_add_RAX__AL() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(RAX, AL).is_err());
}

#[test]
fn test_add_AH__EAX() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(AH, EAX).is_err());
}

#[test]
fn test_add_AL__RAX() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(AL, RAX).is_err());
}

#[test]
fn test_add_RAX__R8B() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(RAX, R8B).is_err());
}

#[test]
fn test_add_AH__RAX() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(AH, RAX).is_err());
}

#[test]
fn test_add_R8B__AH() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(R8B, AH).is_err());
}

#[test]
fn test_add_AL__SIL() {
    let mut asm = Assembler::new(vec![]);
    asm.add(AL, SIL).unwrap();
    assert_eq!(asm.done().unwrap(), vec![0x40, 0x00, 0xF0]);
}

#[test]
fn test_add_EAX__AX() {
    let mut asm = Assembler::new(vec![]);
    assert!(asm.add(EAX, AX).is_err());
}

#[test]
fn test_add_EAX__EAX() {
    let mut asm = Assembler::new(vec![]);
    asm.add(EAX, EAX).unwrap();
    assert_eq!(asm.done().unwrap(), vec![0x01, 0xC0]);
}

